{"remainingRequest":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js!/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js??ref--1-0!/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/manager/ManagerReservationModal.vue?vue&type=script&lang=js","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/manager/ManagerReservationModal.vue","mtime":1734329655183},{"path":"/usr/vue/lezuro_all/babel.config.js","mtime":1728542743944},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js","mtime":1728543112262},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["managerStore","name","data","memberPhoneError","memberPhone","memberCountError","memberCount","memberNameError","memberName","startTime","initialStartTime","initialEndTime","errorMessage","endTime","today","Date","toISOString","split","reservedTimes","memo","availableEndTimes","availableTimes","props","selectedRoom","type","Object","required","selectedReservation","isEditMode","Boolean","default","selectedDate","String","watch","newDate","getReservationDt","newStartTime","console","log","reservationEnd","reduce","latest","time","filter","updateAvailableEndTimes","newEndTime","mounted","reservation","slice","reser_user","reser_phone","member","status","computed","isFormValid","methods","validateName","regex","test","validateCount","validatePhoneNm","formatDate","date","year","getFullYear","month","getMonth","padStart","day","getDate","filterAvailableTimes","now","currentHours","getHours","currentMinutes","getMinutes","currentTimeString","_this$selectedRoom","managerId","managerid","error","response","getTask","forEach","room","room_id","reservations","currentTime","endTimeObj","timeString","includes","push","setMinutes","filteredTimes","editingStartTime","editingEndTime","isEditingTimeIncluded","alert","startTimeObj","closeModal","$emit","confirmReservation","length","params","roomId","roomtype","agree","JSON","stringify","userId","deleteReservation","id","postTask","confirmMsg","reservationId","deleteTask","cancelMsg","managerInfo","parse","localStorage","getItem","identifier","phoneNumber","userName","availableTime","storeName","message","config"],"sources":["src/components/manager/ManagerReservationModal.vue"],"sourcesContent":["<template>\n  <div class=\"modal-overlay\" @click.self=\"closeModal\">\n    <div class=\"modal-content\">\n      <!-- 24.12.09 전체 폰트 수정 -->\n      <h2 class=\"pretendard-extra-extra-bold-log-cabin-24px\">\n        {{ isEditMode && selectedReservation ? \"예약 수정\" : \"예약 등록\" }}\n      </h2>\n\n      <div class=\"form-group\">\n        <!-- 24.12.13 수정 - 과거는 예약 불가하도록 날짜 설정 -->\n        <input type=\"date\" v-model=\"selectedDate\" :min=\"today\"\n          class=\"date-picker pretendard-regular-normal-mine-shaft-18px\" />\n      </div>\n\n      <div class=\"form-group time-selectors\">\n        <select v-model=\"startTime\" class=\"time-picker pretendard-regular-normal-mine-shaft-18px\">\n          <option disabled value=\"\" class=\"pretendard-regular-normal-mine-shaft-18px\">예약 시작 시간</option>\n          <option v-for=\"time in availableTimes\" :key=\"time\" :value=\"time\"\n            class=\"pretendard-regular-normal-mine-shaft-18px\">\n            {{ time }}\n          </option>\n        </select>\n\n        <select v-model=\"endTime\" class=\"time-picker pretendard-regular-normal-mine-shaft-18px\">\n          <option disabled value=\"\" class=\"pretendard-regular-normal-mine-shaft-18px\">예약 종료 시간</option>\n          <option v-for=\"time in availableEndTimes\" :key=\"time\" :value=\"time\"\n            class=\"pretendard-regular-normal-mine-shaft-18px\">\n            {{ time }}\n          </option>\n        </select>\n      </div>\n\n      <div>\n        <input type=\"text\" v-model=\"memberCount\" placeholder=\"인원수를 적어주세요\"\n          class=\"memo-input pretendard-regular-normal-mine-shaft-18px\" @input=\"validateCount\" />\n        <!-- 24.12.11 수정 - 에러 문구 추가 -->\n        <div class=\"error-message pretendard-regular-normal-white-12px\" v-if=\"memberCountError\">{{ memberCountError }}</div>\n      </div>\n      <div>\n        <input type=\"text\" v-model=\"memberName\" placeholder=\"예약자명을 적어주세요\"\n          class=\"memo-input pretendard-regular-normal-mine-shaft-18px\" @input=\"validateName\" />\n        <!-- 24.12.11 수정 - 에러 문구 추가 -->\n        <div class=\"error-message pretendard-regular-normal-white-12px\" v-if=\"memberNameError\">{{ memberNameError }}</div>\n      </div>\n      <div>\n        <input type=\"text\" v-model=\"memberPhone\" placeholder=\"휴대번호를 적어주세요\"\n          class=\"memo-input pretendard-regular-normal-mine-shaft-18px\" maxlength=\"11\" @input=\"validatePhoneNm\" />\n        <!-- 24.12.11 수정 - 에러 문구 추가 -->\n        <div class=\"error-message pretendard-regular-normal-white-12px\" v-if=\"memberPhoneError\">{{ memberPhoneError }}</div>\n      </div>\n\n      <!-- <div class=\"form-group\">\n        <textarea v-model=\"memo\" placeholder=\"예약자명 메모를 남겨주세요\" class=\"memo-input\"></textarea>\n      </div> -->\n\n      <div class=\"form-group buttons\">\n        <button class=\"cancel-btn pretendard-bold-white-18px\" @click=\"closeModal\">취소하기</button>\n        <button class=\"confirm-btn pretendard-bold-white-18px\" @click=\"confirmReservation\">\n          {{ isEditMode ? \"수정하기\" : \"확인하기\" }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { managerStore } from \"@/store/managerStore\"; // API 호출\n\nexport default {\n  name: \"ManagerReservationModal\",\n  data() {\n    return {\n      memberPhoneError: \"\", /* 24.12.09 수정*/\n      memberPhone: \"\",\n      memberCountError: \"\", /* 24.12.09 수정*/\n      memberCount: \"\",\n      memberNameError: \"\", /* 24.12.11 수정*/\n      memberName: \"\",\n      startTime: \"\",\n      initialStartTime: \"\", // 처음 열렸을 때의 startTime\n      initialEndTime: \"\",\n      errorMessage: \"\",\n      endTime: \"\",\n      today: new Date().toISOString().split('T')[0],  // 24.12.13 수정 - 추가 : 현재 날짜를 'YYYY-MM-DD' 형식으로 변환\n      reservedTimes: [],\n      memo: \"\",\n      availableEndTimes: [],\n      availableTimes: [\n        \"00:00\",\n        \"00:30\",\n        \"01:00\",\n        \"01:30\",\n        \"02:00\",\n        \"02:30\",\n        \"03:00\",\n        \"03:30\",\n        \"04:00\",\n        \"04:30\",\n        \"05:00\",\n        \"05:30\",\n        \"06:00\",\n        \"06:30\",\n        \"07:00\",\n        \"07:30\",\n        \"08:00\",\n        \"08:30\",\n        \"09:00\",\n        \"09:30\",\n        \"10:00\",\n        \"10:30\",\n        \"11:00\",\n        \"11:30\",\n        \"12:00\",\n        \"12:30\",\n        \"13:00\",\n        \"13:30\",\n        \"14:00\",\n        \"14:30\",\n        \"15:00\",\n        \"15:30\",\n        \"16:00\",\n        \"16:30\",\n        \"17:00\",\n        \"17:30\",\n        \"18:00\",\n        \"18:30\",\n        \"19:00\",\n        \"19:30\",\n        \"20:00\",\n        \"20:30\",\n        \"21:00\",\n        \"21:30\",\n        \"22:00\",\n        \"22:30\",\n        \"23:00\",\n        \"23:30\",\n      ],\n    };\n  },\n  props: {\n    selectedRoom: {\n      type: Object, // 전달받는 데이터 타입 설정 (예시: String 또는 Number)\n      required: true, // 필수 prop 여부\n    },\n    selectedReservation: {\n      type: Object,\n      required: false,\n    },\n    isEditMode: {\n      type: Boolean,\n      default: false,\n    },\n    selectedDate: {\n      type: String,\n      required: true, // selectedDate가 필수임을 명시\n    },\n  },\n  watch: {\n    selectedDate(newDate) {\n      this.getReservationDt();\n    },\n    startTime(newStartTime) {\n      if (newStartTime) {\n        console.log(\"[startTime] New startTime:\", newStartTime);\n\n        // 예약된 시간에 따라 동적으로 종료 시간 필터링\n        const reservationEnd = this.reservedTimes.reduce((latest, time) => {\n          return time > latest ? time : latest;\n        }, \"\");\n\n        if (newStartTime < reservationEnd) {\n          // 예약된 이전 시간을 선택하면 예약된 이후의 시간을 제외\n          this.availableEndTimes = this.availableTimes.filter(\n            (time) => time > newStartTime && time <= reservationEnd\n          );\n        } else {\n          // 예약된 이후 시간을 선택하면 시작 시간 이후로 종료 가능\n          this.availableEndTimes = this.availableTimes.filter(\n            (time) => time > newStartTime\n          );\n        }\n\n        // 추가: 종료 시간 필터링 업데이트 호출\n        this.updateAvailableEndTimes();\n        console.log(\"[startTime] Updated availableEndTimes:\", this.availableEndTimes);\n      }\n    },\n\n    endTime(newEndTime) {\n      if (newEndTime && this.startTime) {\n        // 종료 시간이 시작 시간 이전이면 경고 메시지 표시\n        if (newEndTime <= this.startTime) {\n          this.errorMessage = \"종료 시간은 시작 시간 이후여야 합니다.\";\n          this.endTime = \"\"; // 종료 시간 초기화\n        } else {\n          this.errorMessage = \"\"; // 오류 메시지 초기화\n        }\n      }\n    },\n  },\n  mounted() {\n    this.getReservationDt();\n    // 수정 모드일 때 기존 예약 데이터를 입력 필드에 채움\n    if (this.isEditMode && this.selectedReservation) {\n      const reservation = this.selectedReservation;\n      this.selectedDate = reservation.startTime.slice(0, 10);\n      this.startTime = reservation.startTime.slice(11, 16);\n      this.endTime = reservation.endTime.slice(11, 16);\n      this.memberName = reservation.reser_user || \"\";\n      this.memberPhone = reservation.reser_phone || \"\";\n      this.memberCount = reservation.member || \"\";\n      this.status = reservation.status || \"\";\n      this.initialStartTime = this.startTime; // 초기값 저장\n      this.initialEndTime = this.endTime; // 초기값 저장\n    } else if (this.selectedRoom) {\n      // 신규 예약 등록 시\n      this.startTime = \"\";\n      this.endTime = \"\";\n      this.memberName = \"\";\n      this.memberPhone = \"\";\n      this.memberCount = \"\";\n    }\n  },\n  computed: {\n    //     availableEndTimes() {\n    //   if (!Array.isArray(this.reservedTimes) || this.reservedTimes.length === 0) {\n    //     // reservedTimes가 비어있다면 전체 availableTimes 반환\n    //     return this.availableTimes.filter((time) => time > this.startTime);\n    //   }\n    //   const reservationEnd = this.reservedTimes.reduce((latest, time) => {\n    //     return time > latest ? time : latest;\n    //   }, \"\");\n    //   if (this.startTime < reservationEnd) {\n    //     return this.availableTimes.filter(\n    //       (time) => time > this.startTime && time <= reservationEnd\n    //     );\n    //   }\n    //   return this.availableTimes.filter((time) => time > this.startTime);\n    // },\n\n    // 24.12.11 수정 - 추가\n    // 전체 폼 유효성 검사\n    isFormValid() {\n      return !this.memberPhoneError && !this.memberCountError && !this.memberNameError;\n    },\n  },\n  methods: {\n    // 24.12.11 수정 - 추가\n    validateName() {\n      const regex = /^[가-힣]*$/; // 한글만 허용\n      this.memberNameError = !regex.test(this.memberName)\n        ? \"예약자명은 한글로 입력해주세요.\"\n        : null;\n    },\n    // 24.12.09 수정 - 추가\n    validateCount() {\n      const regex = /^[0-9]*$/; // 숫자만 허용\n      this.memberCountError = !regex.test(this.memberCount)\n        ? \"인원수는 숫자로 입력해주세요.\"\n        : null;\n    },\n    // 24.12.09 수정 - 추가\n    validatePhoneNm() {\n      const regex = /^[0-9]{11}$/; // 숫자만 허용\n      this.memberPhoneError = !regex.test(this.memberPhone)\n        ? \"전화번호는 숫자 11자리로 입력해주세요.\"\n        : null;\n    },\n    updateAvailableEndTimes() {\n      if (!this.startTime) {\n        this.availableEndTimes = this.availableTimes;\n        return;\n      }\n\n      const reservationEnd = this.reservedTimes.reduce((latest, time) => {\n        return time > latest ? time : latest;\n      }, \"\");\n\n      if (this.startTime < reservationEnd) {\n        this.availableEndTimes = this.availableTimes.filter(\n          (time) => time > this.startTime && time <= reservationEnd\n        );\n      } else {\n        this.availableEndTimes = this.availableTimes.filter(\n          (time) => time > this.startTime\n        );\n      }\n      console.log(\"[Available End Times Updated]\", this.availableEndTimes);\n    },\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, \"0\");\n      const day = String(date.getDate()).padStart(2, \"0\");\n      return `${year}-${month}-${day}`;\n    },\n    filterAvailableTimes() {\n      const now = new Date();\n      const currentHours = String(now.getHours()).padStart(2, \"0\");\n      const currentMinutes = String(now.getMinutes()).padStart(2, \"0\");\n      const currentTimeString = `${currentHours}:${currentMinutes}`;\n\n      console.log(\"[Filter Logic] 현재 시간:\", currentTimeString);\n\n      if (this.selectedDate === this.formatDate(now)) {\n        // 현재 날짜일 경우 현재 시간 이후의 시간만 남기기\n        return this.availableTimes.filter((time) => time >= currentTimeString);\n      }\n      // 미래 날짜는 모든 시간을 표시\n      return this.availableTimes;\n    },\n    async getReservationDt() {\n      try {\n        // 선택된 날짜와 방 매니저 ID 가져오기\n        const date = this.selectedDate;\n        const managerId = this.selectedRoom?.managerid;\n\n        console.log(\"[Step 1] managerId 가져오기:\", managerId);\n        console.log(\"[Step 2] 선택된 날짜:\", date);\n\n        if (!managerId) {\n          console.error(\"[Error] managerId가 없습니다.\");\n          return;\n        }\n\n        console.log(\n          `[Step 3] API 요청 URL: reservations/date/${date}/manager?managerId=${managerId}`\n        );\n        const response = await managerStore.getTask(\n          `reservations/date/${date}/manager?managerId=${managerId}`\n        );\n\n        console.log(\"[Step 4] API 응답 데이터:\", response);\n\n        // 예약된 시간 저장\n        this.reservedTimes = [];\n        response.forEach((room) => {\n          if (room.room_id === this.selectedRoom.room_id) {\n            room.reservations.forEach((reservation) => {\n              if (reservation.status === \"cancel\") return;\n              const startTime = new Date(reservation.startTime)\n                .toISOString()\n                .slice(11, 16);\n              const endTime = new Date(reservation.endTime)\n                .toISOString()\n                .slice(11, 16);\n\n              console.log(\"[Step 5] 예약된 시간:\", startTime, \"-\", endTime);\n\n              let currentTime = new Date(`1970-01-01T${startTime}:00Z`);\n              const endTimeObj = new Date(`1970-01-01T${endTime}:00Z`);\n\n              while (currentTime < endTimeObj) {\n                const timeString = currentTime.toISOString().slice(11, 16);\n\n                // 예약된 시간을 reservedTimes에 추가\n                if (!this.reservedTimes.includes(timeString)) {\n                  this.reservedTimes.push(timeString);\n                }\n\n                currentTime.setMinutes(currentTime.getMinutes() + 30); // 30분 단위로 증가\n              }\n            });\n          }\n        });\n\n        console.log(\"[Step 6] 최종 예약된 시간 목록:\", this.reservedTimes);\n\n        // 현재 시간 이후의 시간만 필터링\n        const filteredTimes = this.filterAvailableTimes();\n\n        // isEditMode가 true이면 수정 중인 예약 시간을 포함\n        if (this.isEditMode && this.selectedReservation) {\n          const editingStartTime = this.selectedReservation.startTime.slice(\n            11,\n            16\n          );\n          const editingEndTime = this.selectedReservation.endTime.slice(11, 16);\n\n          console.log(\n            \"[Step 7] 현재 수정 중인 예약 시간:\",\n            editingStartTime,\n            \"-\",\n            editingEndTime\n          );\n\n          let currentTime = new Date(`1970-01-01T${editingStartTime}:00Z`);\n          const endTimeObj = new Date(`1970-01-01T${editingEndTime}:00Z`);\n\n          while (currentTime < endTimeObj) {\n            const timeString = currentTime.toISOString().slice(11, 16);\n            // 수정 중인 예약 시간은 무조건 포함\n            if (!filteredTimes.includes(timeString)) {\n              filteredTimes.push(timeString);\n            }\n            currentTime.setMinutes(currentTime.getMinutes() + 30);\n          }\n        }\n\n        // reservedTimes를 제외한 availableTimes 설정\n        this.availableTimes = filteredTimes.filter(\n          (time) =>\n            !this.reservedTimes.includes(time) ||\n            this.isEditingTimeIncluded(time)\n        );\n\n        console.log(\n          \"[Step 8] 최종 사용 가능한 시간 목록:\",\n          this.availableTimes\n        );\n      } catch (error) {\n        console.error(\"[Error] 예약 시간 가져오기 오류:\", error);\n        alert(\"예약된 시간을 가져오는 중 오류가 발생했습니다.\");\n      }\n    },\n    isEditingTimeIncluded(time) {\n      if (this.isEditMode && this.selectedReservation) {\n        const editingStartTime = this.selectedReservation.startTime.slice(\n          11,\n          16\n        );\n        const editingEndTime = this.selectedReservation.endTime.slice(11, 16);\n\n        const currentTime = new Date(`1970-01-01T${time}:00Z`);\n        const startTimeObj = new Date(`1970-01-01T${editingStartTime}:00Z`);\n        const endTimeObj = new Date(`1970-01-01T${editingEndTime}:00Z`);\n\n        return currentTime >= startTimeObj && currentTime < endTimeObj;\n      }\n      return false;\n    },\n\n    closeModal() {\n      this.$emit(\"close\");\n    },\n    async confirmReservation() {\n      console.log(\"selectedDate:\", this.selectedDate);\n      console.log(\"startTime:\", this.startTime, \"endTime:\", this.endTime);\n\n      const startTime = `${this.selectedDate}T${this.startTime}:00.000Z`;\n      const endTime = `${this.selectedDate}T${this.endTime}:00.000Z`;\n\n      // 24.12.11 수정 - 추가\n      if (!this.isFormValid) {\n        alert(\"형식에 맞게 입력해주세요.\");\n        return;\n      }\n\n      if (this.memberPhone.length !== 11) {\n        this.errorMessage = \"휴대번호 11자리를 입력해주세요\";\n        return; // 요청 차단\n      }\n      this.errorMessage = \"\";\n\n      if (!this.selectedRoom) {\n        alert(\"방 정보가 누락되었습니다.\");\n        return;\n      }\n      // let userId = null;\n      //   if (this.isEditMode && this.selectedReservation) {\n      //     userId = this.selectedReservation.userId; // 기존 예약의 userId 저장\n      //   }\n      const params = {\n        roomId: this.selectedRoom.room_id,\n        managerid: this.selectedRoom.managerid,\n        startTime,\n        endTime,\n        roomtype: \"Golf\",\n        reser_user: this.memberName,\n        reser_phone: this.memberPhone,\n        member: this.memberCount,\n        agree: true,\n        status: this.isEditMode ? this.status : \"confirm\",\n      };\n      console.log(\"전송할 params 값:\", JSON.stringify(params, null, 2));\n      try {\n        if (this.isEditMode && this.selectedReservation) {\n          console.log(\"수정 모드: 예약 삭제 후 재등록\");\n          const userId = this.selectedReservation.userId;\n          await this.deleteReservation(this.selectedReservation.id);\n          const response = await managerStore.postTask(\n            `reservations/${userId}`,\n            params\n          );\n          if (response) {\n            alert(\"예약이 수정되었습니다.\");\n            this.confirmMsg();\n          }\n        } else {\n          const response = await managerStore.postTask(\n            \"reservations/1\",\n            params\n          );\n          if (response) {\n            console.log(\"[confirmReservation] Triggering confirmMsg...\");\n            this.confirmMsg();\n            // 파라미터 값 처리 후 주석 풀기\n            alert(\"예약이 등록되었습니다.\");\n\n          }\n        }\n        this.$emit(\"close\");\n      } catch (error) {\n        console.error(\"API 호출 오류:\", error);\n        alert(\"예약에 실패했습니다. 서버 오류를 확인하세요.\");\n      }\n    },\n\n    // 예약 삭제 메서드\n    async deleteReservation(reservationId) {\n      try {\n        const response = await managerStore.deleteTask(\n          `reservations/${reservationId}`\n        );\n        console.log(\"예약 삭제 완료:\", response);\n        this.cancelMsg();\n      } catch (error) {\n        console.error(\"예약 삭제 오류:\", error);\n        alert(\"예약 삭제에 실패했습니다.\");\n        throw error; // 삭제 실패 시 등록을 진행하지 않도록 예외를 던집니다.\n      }\n    },\n\n    async confirmMsg() {\n      try {\n        const managerInfo = JSON.parse(localStorage.getItem(\"managerInfo\"));\n        if (!managerInfo || !managerInfo.identifier) {\n          console.error(\"[confirmMsg] Manager info or identifier is missing.\");\n          return;\n        }\n\n        const params = {\n          phoneNumber: this.memberPhone, // 예약자 전화번호\n          userName: this.memberName, // 예약자 이름\n          availableTime: `${this.startTime} ~ ${this.endTime}`, // 시작 및 종료 시간\n          storeName: managerInfo.identifier, // 매장 이름\n        };\n\n        console.log(\"[confirmMsg] Manager Info:\", JSON.stringify(managerInfo, null, 2));\n        console.log(\"[confirmMsg] Sending params:\", JSON.stringify(params, null, 2));\n\n        const response = await managerStore.postTask(\n          `v1/sms/confirmReservation`,\n          params\n        );\n        console.log(\"[confirmMsg] Response received:\", JSON.stringify(response, null, 2));\n      } catch (error) {\n        console.error(\"[confirmMsg] API call failed:\", error.response || error.message);\n        console.log(\"[confirmMsg] Error Details:\", JSON.stringify(error.config, null, 2));\n      }\n    },\n    async cancelMsg() {\n      const managerInfo = JSON.parse(localStorage.getItem(\"managerInfo\"));\n      console.log(\"[cancelMsg] Manager Info:\", managerInfo);\n\n      const params = {\n        phoneNumber: this.memberPhone, // 예약자 전화번호\n        userName: this.memberName, // 예약자 이름\n        availableTime: `${this.initialStartTime} ~ ${this.initialEndTime}`, // 시작 및 종료 시간\n        storeName: managerInfo.identifier,\n      };\n\n      console.log(\"[cancelMsg] Sending params:\", params);\n\n      try {\n        const response = await managerStore.postTask(\n          `v1/sms/cancelReservation`,\n          params\n        );\n        console.log(\"[cancelMsg] Response received:\", response);\n      } catch (error) {\n        console.error(\"[cancelMsg] API call failed:\", error);\n      }\n    },\n    // async sendMsg(){\n    //   const params =\n    //   {\n    //     phoneNumber: this.memberPhone, // 예약자 전화번호\n    //   userName: this.memberName, // 예약자 이름\n    //   availableTime: `${this.startTime} ~ ${this.endTime}`, // 시작 및 종료 시간\n    //   storeName: managerInfo.identifier,\n    //   };\n    //   try {\n    //     const response = await taskStore.postTask(\n    //       `v1/sms/sendReservation`,params\n    //     );\n    //     if (!response.data || response.data === undefined) {\n    //       alert(\"예약이 되었습니다.\");\n    //       console.log(\"API Response:\", response.data);\n    //       this.$router.push({ path: \"/reservation-progress\" });\n    //     } else {\n    //       alert(\"예약에 실패했습니다.\");\n    //     }\n    //   } catch (error) {\n    //     console.error(\"API 호출 오류:\", error);\n    //     // alert(\"예약에 실패했습니다. 서버 오류를 확인하세요.\");\n    //   }\n    // },\n  },\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: #fff;\n  width: 880px;\n  padding: 40px;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  /* 24.12.09 수정 - 추가 */\n  display: grid;\n  gap: 10px;\n}\n\nh2 {\n  margin-bottom: 20px;\n}\n\n/* .form-group {\n  margin-bottom: 20px;\n} */\n\n.date-picker {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n\n.time-selectors {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  /* 24.12.09 수정*/\n}\n\n.time-picker {\n  width: 50%;\n  /* 24.12.09 수정*/\n  height: 60px;\n  /* 24.12.09 수정 - 추가 */\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n/* 24.12.09 수정 */\n.memo-input {\n  width: 100%;\n  /* height:230px; */\n  height: 60px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  resize: none;\n}\n\n.buttons {\n  display: flex;\n  justify-content: space-between;\n}\n\n.cancel-btn,\n.confirm-btn {\n  width: 48%;\n  padding: 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.cancel-btn {\n  /* 24.12.09 수정- 배경색 변경 */\n  background-color: #999999;\n  color: #fff;\n}\n\n/* 24.12.09 수정- 배경색 변경 */\n.confirm-btn {\n  background-color: #184199;\n  color: #fff;\n}\n\n/* 24.12.09 수정 */\n.error-message {\n  display: flex;\n  align-items: center;\n  color: var(--monza);\n  font-size: 12px;\n  margin-top: 4px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]}]}