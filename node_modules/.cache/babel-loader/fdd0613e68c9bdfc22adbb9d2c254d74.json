{"remainingRequest":"/usr/vue/lezuro_all/node_modules/thread-loader/dist/cjs.js!/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js!/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js??ref--1-0!/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/BoardDetail.vue?vue&type=script&lang=js","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/BoardDetail.vue","mtime":1734586670667},{"path":"/usr/vue/lezuro_all/babel.config.js","mtime":1728542743944},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/thread-loader/dist/cjs.js","mtime":1728542748260},{"path":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js","mtime":1728543112262},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["RjZsWi","XFooter","Header","taskStore","name","components","props","data","title","updatedAt","author","views","content","contents","imageUrl","loginInfo","comments","isEditing","basicProfileImg","authorId","isLoggedIn","mounted","id","$route","query","console","log","fetchBoardDetail","error","toGoBoardList","JSON","parse","localStorage","getItem","methods","togoEditBoard","$router","push","path","deleteBoard","response","deleteTask","alert","getSelectTasks","post_title","post_author","post_authorId","post_content","post_views","post_createdAt","split","post_imageUrl","commentList","filter","comment","comment_content","trim","comment_author","map","profileImg","editedContent","postComments","userId","profileImage","now","Date","koreaTime","getTime","createdAt","toISOString","replace","slice","params","category","freeBoardId","afterServiceId","askId","commentText","stringify","postTask","toggleEditComment","updateComment","updateTask","comment_id","deleteComments","commentId","toGoLoginView"],"sources":["src/components/BoardDetail.vue"],"sourcesContent":["<template>\n  <div class=\"container-center-horizontal\">\n    <div class=\"communitydetails-2 screen\">\n      <Header />\n      <rj-zs-wi :frame72911Props=\"rJZsWIProps.frame72911Props\" :frame72912Props=\"rJZsWIProps.frame72912Props\" />\n      <div class=\"frame-7913\">\n\n        <div class=\"title pretendard-bold-log-cabin-38px\">자유게시판</div>\n        <div class=\"board-detail\">\n          <!-- 24.11.26 수정 - class 수정-->\n          <div class=\"board-detail-top\">\n            <!-- 24.11.26 수정 - class 수정-->\n            <div class=\"board-detail-title valign-text-middle pretendard-bold-log-cabin-30px\">\n              {{ title }}\n            </div>\n            <!-- 24.11.26 수정 - class 수정-->\n            <div class=\"notice-info pretendard-regular-normal-mountain-mist-20px\">\n              <!-- 24.11.26 수정 - 추가 -->\n              <div class=\"notice-info-first\">\n                <div class=\"frame-7835-item-1 valign-text-middle\">\n                  {{ updatedAt }}\n                </div>\n                <!-- 24.11.26 수정 -->\n                <span class=\"slash\"> l </span>\n                <div class=\"frame-7835-item-1 separ valign-text-middle\">\n                  작성자 : {{ author }}\n                </div>\n                <!-- 24.11.26 수정 -->\n                <span class=\"slash\"> l </span>\n                <div class=\"frame-7835-item-1 valign-text-middle\">\n                  조회수 : {{ views }}\n                </div>\n              </div>\n              <!-- 24.11.26 수정 - 추가 -->\n              <!-- <div class=\"notice-info-btn\" v-if=\"loginInfo.id === authorId\"> -->\n              <div class=\"notice-info-btn\" v-if=\"loginInfo.name === author\">\n                <button class=\"comment-edit-button pretendard-medium-white-18px\" @click=\"togoEditBoard\">수정</button>\n                <button class=\"delete-button pretendard-medium-white-18px\" @click=\"deleteBoard\">삭제</button>\n              </div>\n            </div>\n          </div>\n          <div class=\"frame-7836-6 pretendard-light-granite-gray-18px\">\n            <p class=\"lorem-ipsum-dolor-si-7 valign-text-middle\">\n              {{ content }}\n            </p>\n            <div v-if=\"imageUrl\" class=\"image-container\">\n              <img :src=\"imageUrl\" alt=\"첨부된 이미지\" class=\"uploaded-image\" />\n            </div>\n          </div>\n        </div>\n\n        <button class=\"to-go-list valign-text-middle pretendard-medium-white-18px\" @click=\"toGoBoardList\">\n          목록으로\n        </button>\n\n        <div class=\"reply-content\">\n          <!-- 24.11.26 수정 - 추가 -->\n\n          <div v-if=\"isLoggedIn\" class=\"reply-write\">\n            <!-- 24.12.19 수정 - 폰트 추가 -->\n            <textarea placeholder=\" 내용을 입력해 주세요\" class=\"reply-textarea pretendard-regular-normal-mountain-mist-16px\"\n              v-model=\"contents\"></textarea>\n            <div class=\"reply-buttons\">\n              <button class=\"cancel-button pretendard-regular-normal-white-18px\">\n                취소\n              </button>\n              <button class=\"submit-button pretendard-regular-normal-white-18px\" @click=\"postComments\">\n                입력\n              </button>\n            </div>\n          </div>\n          <div v-else class=\"reply-write\">\n            <p class=\"pretendard-regular-normal-granite-gray-18px\" @click=\"toGoLoginView\">로그인 후 댓글을 작성할 수 있습니다.</p>\n          </div>\n\n          <div class=\"reply-view\">\n            <div class=\"reply-count pretendard-bold-black-20px\">댓글 {{ comments.length }}</div>\n            <hr class=\"divider\" />\n            <!-- 24.11.22 수정 - 추가 -->\n            <!-- 댓글이 있을 경우 -->\n            <div v-if=\"comments.length > 0\">\n              <div class=\"comment\" v-for=\"comment in comments\" :key=\"comment.id\">\n                <div class=\"comment-header\">\n                  <!-- <img class=\"comment-avatar\" :src=\"comment.avatar\" alt=\"User avatar\" /> -->\n                  <!-- 24.11.22 수정 -->\n                  <img class=\"comment-avatar\" :src=\"comment.avatar || (comment.profileImage || basicProfileImg)\"\n                    alt=\"User avatar\" />\n                  <span class=\"comment-author pretendard-medium-mine-shaft-20px\">{{ comment.comment_author }}</span>\n                  <span class=\"comment-date pretendard-regular-normal-mine-shaft-18px\">{{ comment.comment_createdAt ?\n                    comment.comment_createdAt.split(\"T\")[0] :\n                    '날짜 없음' }}</span>\n                </div>\n                <div class=\"comment-body pretendard-regular-normal-granite-gray-18px\">\n                  <div v-if=\"comment.isEditing\">\n                    <textarea type=\"text\" v-model=\"comment.editedContent\"\n                      class=\"comment-input pretendard-regular-normal-granite-gray-18px\" placeholder=\"댓글을 수정하세요\" />\n                  </div>\n                  <div v-else>\n                    {{ comment.comment_content || '내용 없음' }}\n                  </div>\n                </div>\n\n                <div class=\"comment-actions\" v-if=\"comment.comment_userId === loginInfo.id\">\n\n                  <button class=\"comment-edit-button pretendard-regular-normal-white-18px\"\n                    @click=\"toggleEditComment(comment)\">\n                    {{ comment.isEditing ? \"완료\" : \"수정\" }}\n                  </button>\n                  <button class=\"delete-button pretendard-regular-normal-white-18px\"\n                    @click=\"deleteComments(comment.comment_id)\">\n                    삭제\n                  </button>\n                </div>\n              </div>\n            </div>\n            <!-- 24.11.22 수정 - 추가 -->\n            <!-- 댓글이 없을 경우 -->\n            <div v-else>\n              <!-- 24.11.26 수정 - font 추가 -->\n              <p class=\"pretendard-regular-normal-granite-gray-18px\">등록된 댓글이 없습니다.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <x-footer />\n    </div>\n  </div>\n</template>\n\n<script>\nimport RjZsWi from \"./RjZsWi\";\nimport XFooter from \"./XFooter\";\nimport Header from \"./Header.vue\";\nimport { taskStore } from \"@/store/taskStore\";\n\nexport default {\n  name: \"BoardDetail\",\n  components: {\n    Header,\n    RjZsWi,\n    XFooter,\n  },\n  props: [\"rJZsWIProps\"],\n  data() {\n    return {\n      title: \"\",\n      updatedAt: \"\",\n      author: \"\",\n      views: \"\",\n      content: \"\",\n      contents: \"\",\n      imageUrl: \"\",\n      loginInfo: {},\n      comments: [],\n      isEditing: false,\n      // 24.11.22 수정\n      basicProfileImg: 'https://cdn.animaapp.com/projects/66da512d0c22d478015e0e07/releases/66da51d8cf50153cef9952df/img/group-736@2x.png',\n      authorId: null, // 24.11.26 수정 - 추가:게시글 작성자의 ID\n      isLoggedIn: null, // 24.11.26 수정 - 추가 : 로그인 상태\n    };\n  },\n  async mounted() {\n    // 라우트에서 전달된 상태 데이터를 가져옵니다.\n    const id = this.$route.query.id\n    console.log(\"Received ID:\", id);\n    if (id) {\n      this.id = id;\n      await this.fetchBoardDetail();\n    } else {\n      console.error(\"ID를 찾을 수 없습니다.\");\n      this.toGoBoardList();\n    }\n    // await this.getComments();\n    const loginInfo = JSON.parse(localStorage.getItem(\"loginInfo\"));\n    this.loginInfo = loginInfo || {};\n    console.log(\"초기화된 this.loginInfo:\", this.loginInfo);\n\n    // 24.11.26 수정 - 추가\n    // 로그인된 상태에서만 댓글을 작성할 수 있도록 처리\n    this.isLoggedIn = this.loginInfo.id ? true : false;\n    console.log('isLoggedIn', this.isLoggedIn)\n  },\n  methods: {\n    // 24.11.26 수정 - 추가\n    togoEditBoard() {\n      this.$router.push({\n        path: \"/board-write\",\n        query: {\n          id: this.id,\n        },\n      });\n    },\n    // 24.11.26 수정 - 추가\n    async deleteBoard() {\n      const response = await taskStore.deleteTask(`posts/${this.id}`);\n      alert('게시글이 삭제되었습니다.');\n      this.$router.push({ path: \"/board-list\" });\n    },\n    async fetchBoardDetail() {\n      try {\n        if (!this.id) {\n          console.error(\"게시물 ID가 없습니다.\");\n          return;\n        }\n\n        // API 호출\n        const response = await taskStore.getSelectTasks(`posts/${this.id}`);\n        console.log(\"API 응답:\", response);\n\n        // 데이터가 존재하는지 확인 후 할당\n        if (response && response[0]) {\n          // 게시물 정보 할당\n          this.title = response[0].post_title || \"제목 없음\";\n          this.author = response[0].post_author || \"작성자 없음\";\n          this.authorId = response[0].post_authorId || null; // 24.11.26 수정 - 추가:작성자의 ID 저장\n          this.content = response[0].post_content || \"내용이 없습니다.\";\n          this.updatedAt = response[0].updatedAt\n          this.views = response[0].post_views,\n            this.updatedAt = response[0].post_createdAt.split(\"T\")[0];\n          this.imageUrl = response[0].post_imageUrl\n\n\n\n\n          // 댓글 정보 할당\n          // this.comments = response[0].commentList || [];\n          // console.log(\"댓글 리스트:\", this.comments);\n          // this.comments = this.comments.map((comment) => ({\n\n          // 24.11.26 수정 - 기본 null 값 댓글 제외\n          this.comments = (response[0].commentList || []).filter(\n            (comment) =>\n              comment.comment_content !== null &&\n              comment.comment_content.trim() !== \"\" &&\n              comment.comment_author !== null\n          ).map((comment) => ({\n            ...comment,\n            isEditing: false, // Add isEditing with a default value of false\n            // 24.11.26 수정 - 추가\n            profileImg: comment.profileImg || this.basicProfileImg, // 댓글 작성자 프로필 이미지\n            editedContent: comment.comment_content,\n          }));\n          console.log(\"Updated Comments:\", this.comments);\n          console.log('response 1', response)\n\n        } else {\n          console.error(\"응답 데이터가 없습니다.\");\n        }\n      } catch (error) {\n        console.error(\"게시물 데이터를 가져오는 중 오류 발생:\", error);\n      }\n    },\n    async postComments() {\n      try {\n        const loginInfo = JSON.parse(localStorage.getItem(\"loginInfo\"));\n        const author = loginInfo.name;\n        const userId = loginInfo.id;\n        // console.log('userId', userId)\n        // const userInfo = await taskStore.getSelectTasks(`http://13.124.62.68:3000/api/v1/users/${loginInfo.id}`);\n        // console.log('userInfo', userInfo)\n        const profileImg = loginInfo.profileImage; //24.11.22 수정 - 추가\n        console.log('profileImg:', profileImg);\n        const now = new Date();\n        const koreaTime = new Date(now.getTime() + 9 * 60 * 60 * 1000); // UTC+9 시간대 조정\n        const createdAt = koreaTime\n          .toISOString()\n          .replace(\"T\", \" \")\n          .slice(0, 19);\n        // POST 요청으로 데이터를 서버에 전송\n        const params = {\n          // title: this.title,\n          content: this.contents,\n          author: author,\n          userId: userId,\n          category: \"자유게시판\",\n          views: 0,\n          freeBoardId: this.id,\n          afterServiceId: \"1\",\n          askId: \"1\",\n          createdAt: createdAt,\n          commentText: \"0\",\n          updatedAt: createdAt,\n          profileImage: profileImg, // 24.11.22 수정 : profileImage 추가\n        };\n        console.log(\"보내는 데이터:\", JSON.stringify(params, null, 2));\n\n        const response = await taskStore.postTask(\"comments\", params);\n\n\n        console.log(\"등록 성공:\", response);\n        alert(\"등록이 되었습니다\");\n        await this.fetchBoardDetail();\n        this.contents = \"\"; // 입력한 댓글 초기화\n      } catch (error) {\n        console.error(\"등록 실패:\", error);\n        alert(\"등록에 실패했습니다.\");\n      }\n    },\n    toggleEditComment(comment) {\n      // 수정 모드 토글\n      if (comment.isEditing) {\n        this.updateComment(comment);\n      }\n      comment.isEditing = !comment.isEditing;\n    },\n    async updateComment(comment) {\n      try {\n        const now = new Date();\n        const koreaTime = new Date(now.getTime() + 9 * 60 * 60 * 1000); // UTC+9 시간대 조정\n        const createdAt = koreaTime\n          .toISOString()\n          .replace(\"T\", \" \")\n          .slice(0, 19);\n        // POST 요청으로 데이터를 서버에 전송\n        console.log(JSON.stringify(comment))\n        const params = {\n          content: comment.editedContent,\n          createdAt: createdAt,\n        };\n        console.log(\"보내는 데이터:\", JSON.stringify(params));\n\n        const response = await taskStore.updateTask(\n          `comments/${comment.comment_id}`,\n          params\n        );\n        console.log(\"댓글 수정 응답:\", response);\n        await this.fetchBoardDetail();\n        alert(\"댓글이 수정되었습니다.\");\n      } catch (error) {\n        console.error(\"등록 실패:\", error);\n        alert(\"등록에 실패했습니다.\");\n      }\n    },\n    async deleteComments(commentId) {\n      console.log(\"commentId : : \", commentId)\n      try {\n        // 특정 댓글을 삭제\n        const response = await taskStore.deleteTask(`comments/${commentId}`);\n        console.log(\"댓글 삭제 응답:\", response);\n\n        // 삭제 후 댓글 목록을 갱신\n        alert(\"댓글이 삭제되었습니다.\");\n        await this.fetchBoardDetail();\n        // 24.11.26 수정 - 새로고침 삭제\n        // window.location.reload();\n      } catch (error) {\n        console.error(\"댓글 삭제 중 오류 발생:\", error);\n        alert(\"댓글 삭제에 실패했습니다.\");\n      }\n    },\n    toGoBoardList() {\n      this.$router.push({ path: \"/board-list\" });\n    },\n    // 24.11.26 수정 - 추가\n    toGoLoginView() {\n      this.$router.push({ path: \"/login\" });\n    }\n  },\n};\n</script>\n\n<style scoped src=\"@/style/community/boarddetail.css\"></style>\n"],"mappings":"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","ignoreList":[]}]}