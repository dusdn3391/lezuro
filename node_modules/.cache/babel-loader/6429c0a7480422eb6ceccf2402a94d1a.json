{"remainingRequest":"/usr/vue/lezuro_all/node_modules/thread-loader/dist/cjs.js!/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js!/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js??ref--1-0!/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/MapList.vue?vue&type=script&lang=js","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/MapList.vue","mtime":1733810252696},{"path":"/usr/vue/lezuro_all/babel.config.js","mtime":1728542743944},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/thread-loader/dist/cjs.js","mtime":1728542748260},{"path":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js","mtime":1728543112262},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["axios","Header","RjZsWi","XFooter","GameDetail","GoogleMap","Loader","taskStore","name","components","props","data","isModalVisible","searchQuery","selectedShop","limitVenue","selectedRegion","venues","address","telNumber","branchId","location","latitude","longitude","map","protocol","isSecure","mounted","getDetailStroeInfo","methods","handleSearchAndFilter","console","log","filteredVenues","filter","venue","matchesQuery","includes","matchesRegion","region","length","alert","naverInitMap","error","slice","firstVenue","lat","lng","updateMapWithVenues","naver","maps","Map","center","LatLng","zoom","forEach","marker","Marker","position","infoWindow","InfoWindow","content","Event","addListener","open","getCurrentLocation","window","hostname","navigator","geolocation","getCurrentPosition","coords","accuracy","loadNaverMap","fetch","then","response","json","lon","catch","openModal","JSON","stringify","closeModal","getShortAddress","fullAddress","warn","regex","match","toGoReservationWrite","$router","push","params","weekdayHours","weekendHours","mapImage","managerid","storeScale","getSelectTasks","undefined","transformBranchesData","filterVenuesByRegion","transformedVenues","currentLocation","closestBranches","findClosestBranch","closestShop","updateMapWithClosestShop","currentLocationMarker","title","icon","infoElement","document","querySelector","addEventListener","setCenter","calculateDistance","lat1","lng1","lat2","lng2","toRad","value","Math","PI","R","dLat","dLng","a","sin","cos","c","atan2","sqrt","branches","branchesWithDistance","branch","distance","sortedBranches","sort","b","callArround","closestBranch","id","checkNaverMap","setInterval","clearInterval","index","setTimeout","getElementById","initializeMap","loader","apiKey","version","load","google","$refs","mapContainer","setContent"],"sources":["src/components/MapList.vue"],"sourcesContent":["<template>\n  <div class=\"container-center-horizontal\">\n    <div class=\"findvenue-2 screen\">\n      <Header />\n      <rj-zs-wi :frame72911Props=\"rJZsWIProps.frame72911Props\" />\n      <div class=\"title pretendard-bold-log-cabin-38px\">매장찾기</div>\n      <div class=\"select-box\">\n        <div class=\"select-align\">\n          <div class=\"select-style\">\n            <!-- 지역을 선택할 수 있는 select box -->\n            <select\n              class=\"select-text pretendard-regular-normal-mine-shaft-18px\"\n              v-model=\"selectedRegion\"\n              @change=\"filterVenuesByRegion\"\n            >\n              <!-- 24.12.04 수정 - 추가 -->\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"\"\n                selected\n              >\n                전체 지역\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"서울\"\n              >\n                서울\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"인천\"\n              >\n                인천\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"대전\"\n              >\n                대전\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"대구\"\n              >\n                대구\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"광주\"\n              >\n                광주\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"울산\"\n              >\n                울산\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"부산\"\n              >\n                부산\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"강원\"\n              >\n                강원\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"경기\"\n              >\n                경기\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"충북\"\n              >\n                충북\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"충남\"\n              >\n                충남\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"전북\"\n              >\n                전북\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"전남\"\n              >\n                전남\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"경북\"\n              >\n                경북\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"경남\"\n              >\n                경남\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"제주\"\n              >\n                제주\n              </option>\n            </select>\n          </div>\n          <!-- <div class=\"select-style\">\n            세부지역을 선택할 수 있는 select box \n            <select\n              class=\"select-text pretendard-regular-normal-mine-shaft-18px\"\n            >\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"\"\n                disabled\n                selected\n              >\n                전체지역(시군구)\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"\"\n              >\n                서울\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"\"\n              >\n                대구\n              </option>\n              <option\n                class=\"pretendard-regular-normal-mine-shaft-18px\"\n                value=\"\"\n              >\n                부산\n              </option>\n            </select>\n          </div> -->\n        </div>\n        <div class=\"input-style\">\n          <!-- 검색어 입력 필드 -->\n          <input\n            type=\"text\"\n            class=\"input-text pretendard-regular-normal-mountain-mist-18px\"\n            placeholder=\"검색어를 입력해주세요\"\n            v-model=\"searchQuery\"\n          />\n          <img\n            class=\"search-btn-10\"\n            src=\"https://cdn.animaapp.com/projects/66da512d0c22d478015e0e07/releases/66da51d8cf50153cef9952df/img/searchbtn-9.svg\"\n            alt=\"searchBtn\"\n            @click=\"handleSearchAndFilter(searchQuery)\"\n\n          />\n        </div>\n      </div>\n\n      <!-- 720px 초과 -->\n      <div class=\"shop-list-frame\">\n        <div class=\"shop-lists\">\n          <div\n            v-for=\"(venue, index) in limitVenue\"\n            :key=\"index\"\n            class=\"shop-info-box\"\n          >\n            <div class=\"shop-info\">\n              <div class=\"shop-name-info\">\n                <div class=\"valign-text-middle pretendard-bold-mine-shaft-20px\">\n                  {{ venue.name }}\n                </div>\n              </div>\n              <div\n                class=\"address-contant-align pretendard-regular-normal-granite-gray-16px\"\n              >\n                <!-- <div>주소 : {{ venue.address }}</div> -->\n                <!-- 24.11.19 수정 - 추가 -->\n                <div>주소: {{ getShortAddress(venue.address) }}</div>\n                <div>연락처 : {{ venue.telNumber }}</div>\n              </div>\n            </div>\n            <div class=\"shop-info-btn\">\n              <button\n                class=\"detail-view-btn pretendard-medium-white-12px\"\n                @click=\"openModal(venue)\"\n              >\n                자세히보기\n              </button>\n              <button\n                class=\"reservation-btn pretendard-medium-white-12px\"\n                @click=\"toGoReservationWrite(venue)\"\n              >\n                예약하기\n              </button>\n              <button class=\"call-btn pretendard-medium-white-12px\">\n                <a\n                  :href=\"'tel:' + venue.telNumber\"\n                  class=\"pretendard-medium-white-12px\"\n                  >전화걸기</a\n                >\n              </button>\n              <!-- <div class=\"view-44\">\n                <div class=\"overlap-group2-5\">\n                  <a :href=\"'tel:' + venue.telNumber\">\n                    <div class=\"text-1-4 valign-text-middle pretendard-medium-white-12px\">전화걸기</div>\n                  </a>\n                </div>\n              </div> -->\n            </div>\n          </div>\n        </div>\n        <div class=\"map-box\">\n          <!-- <div ref=\"mapContainer\" class=\"map-container\"></div> -->\n          <div id=\"map\" style=\"width: 100%; height: 868px\"></div>\n          <!-- <div class=\"frame-container-10\" :style=\"{ 'background-image': 'url(' + frameContainer + ')' }\">\n              <frame72984 :text2687=\"frame729841Props.text2687\" />\n              <frame72984 :text2687=\"frame729842Props.text2687\" :className=\"frame729842Props.className\" />\n              <frame72984 :text2687=\"frame729843Props.text2687\" :className=\"frame729843Props.className\" />\n              <frame72984 :text2687=\"frame729844Props.text2687\" :className=\"frame729844Props.className\" />\n            </div> -->\n        </div>\n      </div>\n\n      <!-- 720px 이하 -->\n      <div class=\"shop-list\">\n        <div\n          v-for=\"(venue, index) in limitVenue\"\n          :key=\"index\"\n          class=\"shop-list-card\"\n        >\n          <div class=\"shop-info-align\">\n            <div class=\"pretendard-bold-mine-shaft-20px\">{{ venue.name }}</div>\n            <div\n              class=\"address-contant-align pretendard-regular-normal-granite-gray-16px\"\n            >\n              <div>주소 : {{ venue.address }}</div>\n              <div>연락처 : {{ venue.telNumber }}</div>\n            </div>\n          </div>\n          <div class=\"btn-align\">\n            <div class=\"btn-align-head\">\n              <button\n                class=\"detail-view-btn pretendard-medium-white-12px\"\n                @click=\"openModal(venue)\"\n              >\n                자세히보기\n              </button>\n              <button class=\"call-btn pretendard-medium-white-12px\">\n                <a\n                  :href=\"'tel:' + venue.telNumber\"\n                  class=\"pretendard-medium-white-12px\"\n                  >전화걸기</a\n                >\n              </button>\n            </div>\n            <button\n              class=\"reservation-btn pretendard-medium-white-12px\"\n              @click=\"toGoReservationWrite(venue)\"\n            >\n              예약하기\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- <div>   -->\n      <!-- <div id=\"map\" style=\"width: 500px; height: 400px;\"></div> -->\n      <!-- </div> -->\n\n      <XFooter />\n      <GameDetail\n        v-if=\"isModalVisible\"\n        :shop=\"selectedShop\"\n        @close=\"closeModal\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport RjZsWi from \"./RjZsWi\";\n\nimport XFooter from \"./XFooter\";\nimport GameDetail from \"./GameDetail\";\nimport GoogleMap from \"./GoogleMap.vue\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\nimport { taskStore } from \"@/store/taskStore\"; // API 호출\n\nexport default {\n  name: \"MapList\",\n  components: {\n    Header,\n    GameDetail,\n    RjZsWi,\n    XFooter,\n    GoogleMap,\n  },\n  props: [\"rJZsWIProps\"],\n  data() {\n    return {\n      isModalVisible: false,\n      searchQuery: \"\", \n      selectedShop: null, // 선택한 매장 정보 저장\n      limitVenue: [], // 필터링된 매장 데이터\n      selectedRegion: \"\", // 선택된 지역\n      venues: [\n        {\n          name: \"레저로스크린파크골프 광명점\",\n          address: \"경기도 광명시 오리로500\",\n          telNumber: \"02-898-0727\",\n          branchId: \"branch301\",\n\n          location: {\n            latitude: 37.556785357670286,\n            longitude: 126.8369964659211,\n          },\n        },\n      ],\n      limitVenue: [],\n      map: null,\n      location: null, // 위치 정보\n      protocol: '',\n      isSecure: false,\n    };\n  },\n  mounted() {\n    //  this.loadNaverMap();\n    this.getDetailStroeInfo();\n    // this.callArround()\n    // this.initializeMap();\n  },\n  methods: {\n    handleSearchAndFilter() {\n  console.log(\"Search query received:\", this.searchQuery);\n  console.log(\"Selected Region:\", this.selectedRegion);\n\n  // 검색어와 지역 모두 일치하는 매장 필터링\n  const filteredVenues = this.venues.filter((venue) => {\n    const matchesQuery = this.searchQuery\n      ? venue.name.includes(this.searchQuery)\n      : true; // 검색어가 없으면 모든 매장 포함\n    const matchesRegion = this.selectedRegion\n      ? venue.region === this.selectedRegion\n      : true; // 지역이 선택되지 않으면 모든 매장 포함\n    return matchesQuery && matchesRegion;\n  });\n\n  if (filteredVenues.length === 0) {\n    alert(\"해당되는 매장이 존재하지 않습니다. 현재 위치로 이동합니다.\");\n    this.limitVenue = [];\n\n    // 현재 위치로 이동\n    if (this.location) {\n      this.naverInitMap();\n    } else {\n      console.error(\"현재 위치 정보가 없습니다.\");\n      alert(\"현재 위치 정보를 가져올 수 없습니다.\");\n    }\n    return;\n  }\n\n  // 필터링된 매장을 화면에 표시\n  this.limitVenue = filteredVenues.slice(0, 5); // 최대 5개 매장 표시\n  console.log(\"Filtered venues:\", this.limitVenue);\n\n  // 첫 번째 매장을 지도 중심으로 설정\n  const firstVenue = filteredVenues[0];\n  this.location = {\n    lat: firstVenue.location.latitude,\n    lng: firstVenue.location.longitude,\n  };\n\n  // 지도 업데이트\n  this.updateMapWithVenues(filteredVenues);\n},\n  updateMapWithVenues(venues) {\n    console.log(\"Updating map with venues:\", venues);\n\n    const map = new naver.maps.Map(\"map\", {\n      center: new naver.maps.LatLng(\n        venues[0].location.latitude,\n        venues[0].location.longitude\n      ),\n      zoom: 16, // 적절한 줌 레벨\n    });\n\n    venues.forEach((venue) => {\n      const marker = new naver.maps.Marker({\n        position: new naver.maps.LatLng(\n          venue.location.latitude,\n          venue.location.longitude\n        ),\n        map: map,\n      });\n\n      const infoWindow = new naver.maps.InfoWindow({\n        content: `<div style=\"padding:10px; cursor:pointer;\">${venue.name}</div>`,\n      });\n\n      naver.maps.Event.addListener(marker, \"click\", () => {\n        infoWindow.open(map, marker);\n      });\n    });\n\n    console.log(\"Map updated with filtered venues.\");\n  },\n    // async handleSearch(query) {\n    //   // Handle the search query here\n    //   console.log(\"Search query received:\", query);\n\n    //   const foundLocations = this.venues\n    //     // .filter(venue => venue.name.includes(query)) // Check if the venue name includes the search query\n    //     .filter((venue) => venue.name === query)\n    //     .map((venue) => venue.location); // Return only the location values\n    //   console.log(\"Found locations:\", foundLocations);\n    //   if (foundLocations.length === 0) {\n    //     alert(\"해당되는 매장이 존재 하지 않습니다.\"); // Warning for no matches\n    //   } else {\n    //     this.location = {\n    //       lat: foundLocations[0].latitude,\n    //       lng: foundLocations[0].longitude,\n    //     };\n    //     this.initializeMap();\n    //   }\n    // },\n    // 현재 나의 위치 찾기\n    getCurrentLocation() {\n      console.log(\"[Step 1] Geolocation 지원 여부 확인\");\n      this.protocol = window.location.protocol;\n      const hostname = window.location.hostname;\n\n       \n      // HTTPS 여부 판단\n      if(this.protocol === 'https:' ||  hostname === 'localhost' || hostname === '127.0.0.1'){\n        if (navigator.geolocation) {\n        console.log(\"[Step 2] Geolocation 지원됨. 현재 위치 요청 시작...\");\n\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            console.log(\"[Step 3] 위치 정보 요청 성공\");\n            console.log(`[Step 4] 위도: ${position.coords.latitude}`);\n            console.log(`[Step 5] 경도: ${position.coords.longitude}`);\n            console.log(`[Step 6] 정확도: ${position.coords.accuracy} 미터`);\n\n            this.location = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            };\n            console.log(\"[Step 7] 위치 정보 저장 완료:\", this.location);\n\n            this.loadNaverMap(); // 네이버 지도 로드\n            console.log(\"[Step 8] 네이버 지도 로드 함수 호출 완료\");\n          },\n          (error) => {\n            console.error(\"[Error] 위치 정보 요청 실패:\", error);\n          }\n        );\n      } else {\n        console.error(\n          \"[Error] 이 브라우저는 Geolocation API를 지원하지 않습니다.\"\n        );\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n      }else{\n          // HTTP 일때 경우의 수\n      fetch(\"http://ip-api.com/json/\")\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(\"IP-based location:\", data);\n          this.location = {\n            lat: data.lat,\n            lng: data.lon,\n          };\n          this.loadNaverMap(); // 네이버 지도 로드\n        })\n        .catch((error) => console.error(\"Error fetching location:\", error));\n      }\n\n      \n\n   \n    },\n\n    openModal(venue) {\n      this.selectedShop = venue;\n      this.isModalVisible = true; // 모달 열기\n      console.log(\"this.selectedShop : : :\", JSON.stringify(this.selectedShop));\n    },\n    closeModal() {\n      this.isModalVisible = false;\n      this.selectedShop = null;\n    },\n    // 동까지만 추출하는 메서드 - 24.11.19 수정\n    getShortAddress(fullAddress) {\n      if (!fullAddress) {\n        console.warn(\n          \"[getShortAddress] Received undefined or empty address:\",\n          fullAddress\n        );\n        return \"주소 정보 없음\"; // 기본 메시지 반환\n      }\n\n      // 주소를 공백이나 특정 기준(예: \"동\")으로 분리\n      const regex = /(.*동|.*읍|.*면|.*길|.*로)/;\n      const match = fullAddress.match(regex);\n      return match ? match[0] : fullAddress; // 동까지만 반환하거나 원본 주소 반환\n    },\n    toGoReservationWrite(venue) {\n      this.selectedShop = venue;\n      console.log(\"this.selectedShop : : : \", this.selectedShop);\n\n      this.$router.push({\n        name: \"reservation-write\", // 해당 경로의 name을 지정하세요.\n        params: {\n          name: this.selectedShop.name,\n          branchId: this.selectedShop.branchId,\n          address: this.selectedShop.address,\n          weekdayHours: this.selectedShop.weekdayHours,\n          weekendHours: this.selectedShop.weekendHours,\n          mapImage: this.selectedShop.mapImage,\n          managerid: this.selectedShop.managerid,\n          storeScale: this.selectedShop.storeScale,\n          location: {\n            latitude: this.selectedShop.latitude,\n            longitude: this.selectedShop.longitude,\n          },\n        },\n      });\n    },\n    async getDetailStroeInfo() {\n      try {\n        const response = await taskStore.getSelectTasks(\"v1/branch/list\");\n        console.log(\"Courses loaded:\", JSON.stringify(response));\n        if (!response || response === undefined) {\n          alert(\"로그인을 다시 해주세요.\");\n        } else {\n          this.venues = this.transformBranchesData(response); // 데이터 변환\n          this.limitVenue = this.transformBranchesData(response); // 배포용\n          this.getCurrentLocation();\n        }\n      } catch (error) {\n        console.error(\"Error loading courses:\", error);\n        alert(\"매장데이터 조회 실패했습니다. 서버 오류를 확인하세요.\");\n      }\n    },\n    filterVenuesByRegion() {\n  console.log(\"Selected Region:\", this.selectedRegion); // 선택한 지역 출력\n  if (!this.selectedRegion) {\n    console.log(\"전체 지역 선택됨\");\n    this.getDetailStroeInfo(); // 전체 매장 목록을 다시 불러옴\n    return;\n  }\n  let filteredVenues = this.venues;\n\n  // 지역 필터링\n  if (this.selectedRegion) {\n    filteredVenues = this.venues.filter(\n      (venue) => venue.region === this.selectedRegion\n    );\n    // 필터링된 매장 출력\n  }\n\n    console.log(\"Filtered Venues:\", filteredVenues); \n  if (filteredVenues.length > 0) {\n    // 데이터 변환\n    const transformedVenues = this.transformBranchesData(filteredVenues);\n    console.log(\"Transformed Venues:\", transformedVenues); // 변환된 매장 데이터 출력\n\n    // 현재 위치\n    const currentLocation = this.location;\n    console.log(\"Current Location:\", currentLocation); // 현재 위치 출력\n\n    // 가까운 매장 계산\n    const closestBranches = this.findClosestBranch(\n      currentLocation,\n      transformedVenues\n    );\n\n    // 가장 가까운 매장\n    if (closestBranches.length > 1) {\n      const closestShop = closestBranches[1]; // 현재 위치 제외한 가장 가까운 매장\n      console.log(\"Closest Shop:\", closestShop); // 가장 가까운 매장 콘솔 출력\n\n      // 지도 중심 업데이트 및 마커 표시\n      this.updateMapWithClosestShop(closestShop);\n    } else {\n      console.log(\"No closest shop found.\");\n    }\n\n    // 화면에 표시할 매장 설정\n    this.limitVenue = closestBranches.slice(1, 5); // 현재 위치 제외하고 4개 선택\n  } else {\n    console.log(\"No venues found in selected region.\"); // 선택한 지역에 매장이 없을 경우\n    this.limitVenue = [];\n    this.naverInitMap(); // 지도 초기화\n    alert(\"선택한 지역에 매장이 없습니다.\");\n  }\n},\nupdateMapWithClosestShop(closestShop) {\n  console.log(\"Updating map with closest shop:\", closestShop);\n\n  // Naver Map 생성 또는 업데이트\n  const map = new naver.maps.Map(\"map\", {\n    center: new naver.maps.LatLng(\n      closestShop.location.latitude,\n      closestShop.location.longitude\n    ),\n    zoom: 16, // 적절한 줌 레벨\n  });\n  const currentLocationMarker = new naver.maps.Marker({\n    position: new naver.maps.LatLng(this.location.lat, this.location.lng),\n    map: map,\n    title: \"현재 위치\", // 마커 타이틀\n    icon: {\n      content: `\n        <div style=\"\n          background-color: #D30F1A;\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          border: 2px solid white;\n          box-shadow: 0 0 5px rgba(0,0,0,0.3);\n        \"></div>\n      `,\n    },\n  });\n  // 가장 가까운 매장 위치에 기본 네이버 마커 추가\n  const marker = new naver.maps.Marker({\n    position: new naver.maps.LatLng(\n      closestShop.location.latitude,\n      closestShop.location.longitude\n    ),\n    map: map, // 마커가 추가될 지도\n  });\n\n  console.log(\"Naver Marker added at:\", closestShop.location);\n\n  // 인포윈도우 생성\n  const infoWindow = new naver.maps.InfoWindow({\n    content: `<div style=\"padding:10px; cursor:pointer;\">${closestShop.name}</div>`, // 매장 이름 표시\n  });\n\n  // 마커 클릭 이벤트 추가\n  naver.maps.Event.addListener(marker, \"click\", () => {\n    infoWindow.open(map, marker); // 인포윈도우 열기\n\n    // 인포윈도우 클릭 이벤트 추가\n    const infoElement = document.querySelector(`.gm-style div[title=\"${closestShop.name}\"]`);\n    if (infoElement) {\n      infoElement.addEventListener(\"click\", () => {\n        console.log(\"InfoWindow clicked for:\", closestShop.name);\n        this.$router.push({\n          name: \"reservation-write\",\n          params: {\n            name: closestShop.name,\n            branchId: closestShop.branchId,\n            address: closestShop.address,\n            weekdayHours: closestShop.weekdayHours,\n            weekendHours: closestShop.weekendHours,\n            mapImage: closestShop.mapImage,\n            managerid: closestShop.managerid,\n            storeScale: closestShop.storeScale,\n            location: {\n              latitude: closestShop.location.latitude,\n              longitude: closestShop.location.longitude,\n            },\n          },\n        });\n      });\n    }\n  });\n\n  // 지도 중심 위치로 이동\n  map.setCenter(new naver.maps.LatLng(\n    closestShop.location.latitude,\n    closestShop.location.longitude\n  ));\n},\n    // 주변 반경 찾기 로직\n    calculateDistance(lat1, lng1, lat2, lng2) {\n      const toRad = (value) => (value * Math.PI) / 180;\n      const R = 6371; // Earth's radius in kilometers\n      const dLat = toRad(lat2 - lat1);\n      const dLng = toRad(lng2 - lng1);\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(lat1)) *\n          Math.cos(toRad(lat2)) *\n          Math.sin(dLng / 2) *\n          Math.sin(dLng / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c; // Distance in kilometers\n    },\n\n    findClosestBranch(currentLocation, branches) {\n  console.log(\"Calculating distances from:\", currentLocation); // 현재 위치 출력\n  console.log(\"Branches to calculate:\", branches); // 계산 대상 매장 출력\n\n  const branchesWithDistance = branches.map((branch) => {\n    const distance = this.calculateDistance(\n      currentLocation.lat,\n      currentLocation.lng,\n      branch.location.latitude,\n      branch.location.longitude\n    );\n    console.log(`Distance to ${branch.name}: ${distance} km`); // 각 매장 거리 출력\n    return { ...branch, distance };\n  });\n\n  const sortedBranches = branchesWithDistance.sort(\n    (a, b) => a.distance - b.distance\n  );\n  console.log(\"Sorted Branches by Distance:\", sortedBranches); // 정렬된 매장 출력\n\n  return [\n    {\n      name: \"현재 위치\",\n      location: {\n        latitude: currentLocation.lat,\n        longitude: currentLocation.lng,\n      },\n      distance: 0,\n    },\n    ...sortedBranches,\n  ];\n},\n    // 주변 매장 탐색\n    callArround() {\n      const currentLocation = { lat: 37.5583761, lng: 126.8345277 };\n      const branches = [\n        {\n          branchId: \"branch001\",\n          name: \"서울 지점\",\n          location: { latitude: 37.5, longitude: 127.0364 },\n        },\n        {\n          branchId: \"branch0010\",\n          name: \"델리케밥\",\n          location: {\n            latitude: 37.55965189952221,\n            longitude: 126.83222565575036,\n          },\n        },\n        {\n          branchId: \"branch0001\",\n          name: \"델리케밥0\",\n          location: {\n            latitude: 37.56006592349469,\n            longitude: 126.83523518132029,\n          },\n        },\n        {\n          branchId: \"branch101\",\n          name: \"델리케밥1\",\n          location: {\n            latitude: 37.56128049081266,\n            longitude: 126.8394164423239,\n          },\n        },\n        {\n          branchId: \"branch201\",\n          name: \"델리케밥2\",\n          location: {\n            latitude: 37.56080374714247,\n            longitude: 126.82919239989074,\n          },\n        },\n        {\n          branchId: \"branch301\",\n          name: \"델리케밥3\",\n          location: {\n            latitude: 37.556785357670286,\n            longitude: 126.8369964659211,\n          },\n        },\n        {\n          branchId: \"branch401\",\n          name: \"델리케밥4\",\n          location: {\n            latitude: 37.56009802237206,\n            longitude: 126.83171172240971,\n          },\n        },\n        {\n          branchId: \"branch501\",\n          name: \"델리케밥5\",\n          location: {\n            latitude: 37.559176533344726,\n            longitude: 126.8314024154255,\n          },\n        },\n        {\n          branchId: \"branch601\",\n          name: \"델리케밥6\",\n          location: {\n            latitude: 37.56138036084911,\n            longitude: 126.82090267531436,\n          },\n        },\n\n        {\n          branchId: \"branch002\",\n          name: \"부산 지점\",\n          location: { latitude: 31.5, longitude: 117.0364 },\n        },\n      ];\n      const closestBranch = this.findClosestBranch(currentLocation, branches);\n      console.log(\"Closest Branch:\", closestBranch);\n    },\n    // 데이터 변환\n    transformBranchesData(data) {\n      return data.map((branch) => {\n        return {\n          ...branch,\n          branchId: branch.id,\n          location: {\n            latitude: branch.latitude || 37.56128049081266, // 기본값 사용\n            longitude: branch.longitude || 126.8394164423239, // 기본값 사용\n          },\n        };\n      });\n    },\n    // 네이버 지도 로드\n    loadNaverMap() {\n      // Naver Maps API 로드 확인\n      if (typeof naver !== \"undefined\") {\n        this.naverInitMap();\n      } else {\n        // 로드되지 않았으면 다시 확인\n        const checkNaverMap = setInterval(() => {\n          if (typeof naver !== \"undefined\") {\n            clearInterval(checkNaverMap);\n            this.naverInitMap();\n          }\n        }, 100); // 100ms 간격으로 확인\n      }\n    },\n    // 네이버 지도 로드\n    naverInitMap() {\n      console.log(\"진행중입니다.\");\n      console.log(this.location);\n\n      // Naver Map 생성\n      const map = new naver.maps.Map(\"map\", {\n        center: new naver.maps.LatLng(\n          this.location.lat, // 지도 중심을 약간 아래로 이동\n          this.location.lng\n        ),\n        zoom: 16, // 적절한 줌 레벨\n      });\n   \n      // 현재 위치 마커 추가\n      const currentLocationMarker = new naver.maps.Marker({\n        position: new naver.maps.LatLng(this.location.lat, this.location.lng),\n        map: map,\n        icon: {\n          content: `\n      <div style=\"\n        background-color: #D30F1A;\n        width: 24px;\n        height: 24px;\n        border-radius: 50%;\n        border: 2px solid white;\n        box-shadow: 0 0 5px rgba(0,0,0,0.3);\n      \"></div>\n      `,\n        },\n      });\n      console.log(\"Current location marker added.\");\n\n      // 가까운 매장 찾기\n      const closestBranch = this.findClosestBranch(\n        this.location,\n        this.limitVenue\n      );\n\n      // 마커 및 인포윈도우 추가\n      closestBranch.forEach((branch, index) => {\n        const marker = new naver.maps.Marker({\n          position: new naver.maps.LatLng(\n            branch.location.latitude,\n            branch.location.longitude\n          ),\n          map: map,\n          icon:\n            index === 0\n              ? {\n                  content: `\n          <div style=\"\n            background-color: #D30F1A;\n            width: 24px;\n            height: 24px;\n            border-radius: 50%;\n            border: 2px solid white;\n            box-shadow: 0 0 5px rgba(0,0,0,0.3);\n          \"></div>\n          `,\n                }\n              : null,\n        });\n\n        // 인포윈도우 내용 설정\n        const infoWindow = new naver.maps.InfoWindow({\n          content: `<div id=\"info-${branch.branchId}\" style=\"padding:10px; cursor: pointer;\">${branch.name}</div>`, // 고유 ID 추가\n        });\n\n        // 마커 클릭 이벤트\n        naver.maps.Event.addListener(marker, \"click\", () => {\n          infoWindow.open(map, marker);\n\n          setTimeout(() => {\n            const infoElement = document.getElementById(\n              `info-${branch.branchId}`\n            );\n            if (infoElement) {\n              infoElement.addEventListener(\"click\", () => {\n                console.log(\"InfoWindow content clicked:\", branch.name);\n                this.$router.push({\n                  name: \"reservation-write\",\n                  params: {\n                    name: branch.name,\n                    branchId: branch.branchId,\n                    address: branch.address,\n                    weekdayHours: branch.weekdayHours,\n                    weekendHours: branch.weekendHours,\n                    mapImage: branch.mapImage,\n                    managerid: branch.managerid,\n                    storeScale: branch.storeScale,\n                    location: {\n                      latitude: branch.location.latitude,\n                      longitude: branch.location.longitude,\n                    },\n                  },\n                });\n              });\n            }\n          }, 0); // InfoWindow가 DOM에 렌더링된 후 실행\n        });\n      });\n\n      // 가까운 매장만 리스트 업데이트\n      this.limitVenue = closestBranch.slice(1, 5);\n    },\n    /// 구글 지도 로드\n    async initializeMap() {\n      const loader = new Loader({\n        apiKey: \"AIzaSyCDIXWiutjxK5qjCATUyKIL5Sd13E-LSUs\", // 생성한 API 키로 교체\n        version: \"weekly\",\n      });\n\n      console.log(this.location);\n      console.log(\"JSOPN : : : \", JSON.stringify(this.location));\n      await loader.load();\n      this.map = new google.maps.Map(this.$refs.mapContainer, {\n        // center: this.location,35.869368,128.599230\n        center: { lat: 35.869368, lng: 128.59923 }, // 초기 지도 중심 좌표 (예: 샌프란시스코)\n        zoom: 15,\n      });\n\n      console.log(\"this.location: : : : : : : \", this.location);\n      // const closestBranch = this.findClosestBranch(currentLocation, branches);\n      const closestBranch = this.findClosestBranch(this.location, this.venues);\n      console.log(\"Closest Branch:\", closestBranch);\n\n      // 매장명 보이기\n      const infoWindow = new google.maps.InfoWindow();\n      this.limitVenue = closestBranch.slice(1, 5);\n      // this.venues = closestBranch.slice(1, 5);\n\n      // 모든 지점에 대해 마커 추가 및 클릭 이벤트 설정\n      closestBranch.forEach((branch, index) => {\n        const marker = new google.maps.Marker({\n          position: {\n            lat: branch.location.latitude,\n            lng: branch.location.longitude,\n          },\n          map: this.map,\n          title: branch.name, // 타이틀 설정\n          icon:\n            index === 0\n              ? \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n              : null, // 현재 위치 마커는 파란색\n        });\n\n        // 마커 클릭 시 InfoWindow에 타이틀 표시\n        marker.addListener(\"click\", () => {\n          infoWindow.setContent(branch.name); // 지점 이름을 InfoWindow에 설정\n          infoWindow.open(this.map, marker); // InfoWindow를 마커 위치에 표시\n        });\n      });\n    },\n  },\n};\n</script>\n\n<style scoped src=\"@/style/shop/maplist.css\" />\n"],"mappings":"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","ignoreList":[]}]}