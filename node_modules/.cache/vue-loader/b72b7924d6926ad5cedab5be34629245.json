{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/manager/ManagerReservationModal.vue?vue&type=style&index=0&id=eca4f85c&prod&scoped=true&lang=css","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/manager/ManagerReservationModal.vue","mtime":1733792192679},{"path":"/usr/vue/lezuro_all/node_modules/css-loader/dist/cjs.js","mtime":1728542747276},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1728542748492},{"path":"/usr/vue/lezuro_all/node_modules/postcss-loader/src/index.js","mtime":1728542747992},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5tb2RhbC1vdmVybGF5IHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdG9wOiAwOwogIGxlZnQ6IDA7CiAgd2lkdGg6IDEwMHZ3OwogIGhlaWdodDogMTAwdmg7CiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjUpOwogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICB6LWluZGV4OiAxMDAwOwp9CgoubW9kYWwtY29udGVudCB7CiAgYmFja2dyb3VuZDogI2ZmZjsKICB3aWR0aDogODgwcHg7CiAgcGFkZGluZzogNDBweDsKICBib3JkZXItcmFkaXVzOiAxMHB4OwogIGJveC1zaGFkb3c6IDBweCA0cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7Cn0KCmgyIHsKICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9CgovKiAuZm9ybS1ncm91cCB7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKfSAqLwoKLmRhdGUtcGlja2VyIHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDYwcHg7CiAgLyogMjQuMTIuMDkg7IiY7KCVIC0g7LaU6rCAICovCiAgcGFkZGluZzogMTBweDsKICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOwogIGJvcmRlci1yYWRpdXM6IDRweDsKfQoKLnRpbWUtc2VsZWN0b3JzIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBnYXA6IDIwcHg7Cn0KCi50aW1lLXBpY2tlciB7CiAgd2lkdGg6IDUwJTsKICAvKiAyNC4xMi4wOSDsiJjsoJUqLwogIGhlaWdodDogNjBweDsKICAvKiAyNC4xMi4wOSDsiJjsoJUgLSDstpTqsIAgKi8KICBwYWRkaW5nOiAxMHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7CiAgYm9yZGVyLXJhZGl1czogNHB4Owp9CgovKiAyNC4xMi4wOSDsiJjsoJUgKi8KLm1lbW8taW5wdXQgewogIHdpZHRoOiAxMDAlOwogIC8qIGhlaWdodDoyMzBweDsgKi8KICBoZWlnaHQ6IDYwcHg7CiAgcGFkZGluZzogMTBweDsKICBib3JkZXI6IDFweCBzb2xpZCAjY2NjOwogIGJvcmRlci1yYWRpdXM6IDRweDsKICByZXNpemU6IG5vbmU7Cn0KCi5idXR0b25zIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKfQoKLmNhbmNlbC1idG4sCi5jb25maXJtLWJ0biB7CiAgd2lkdGg6IDQ4JTsKICBwYWRkaW5nOiAxNXB4OwogIGJvcmRlcjogbm9uZTsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgY3Vyc29yOiBwb2ludGVyOwp9CgouY2FuY2VsLWJ0biB7CiAgLyogMjQuMTIuMDkg7IiY7KCVLSDrsLDqsr3sg4kg67OA6rK9ICovCiAgYmFja2dyb3VuZC1jb2xvcjogIzk5OTk5OTsKICAvKiBjb2xvcjogI2ZmZjsgKi8KfQoKLmNvbmZpcm0tYnRuIHsKICAvKiAyNC4xMi4wOSDsiJjsoJUgLSDrsLDqsr3sg4kg67OA6rK9ICovCiAgYmFja2dyb3VuZC1jb2xvcjogIzE4NDE5OTsKICAvKiBjb2xvcjogI2ZmZjsgKi8KfQoKLyogMjQuMTIuMDkg7IiY7KCVICovCi5lcnJvci1tZXNzYWdlIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgY29sb3I6IHZhcigtLW1vbnphKTsKICBmb250LXNpemU6IDEycHg7CiAgbWFyZ2luLXRvcDogNHB4Owp9Cg=="},{"version":3,"sources":["ManagerReservationModal.vue"],"names":[],"mappings":";AAmaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ManagerReservationModal.vue","sourceRoot":"src/components/manager","sourcesContent":["<template>\n  <div class=\"modal-overlay\" @click.self=\"closeModal\">\n    <div class=\"modal-content\">\n      <!-- 24.12.09 전체 폰트 수정 -->\n      <h2 class=\"pretendard-extra-extra-bold-log-cabin-24px\">{{ isEditMode && selectedReservation ? '예약 수정' : '예약 등록' }}\n      </h2>\n\n      <div class=\"form-group\">\n        <input type=\"date\" v-model=\"selectedDate\" class=\"date-picker pretendard-regular-normal-mine-shaft-18px\" />\n      </div>\n\n      <div class=\"form-group time-selectors\">\n        <select v-model=\"startTime\" class=\"time-picker pretendard-regular-normal-mine-shaft-18px\">\n          <option disabled value=\"\" class=\"pretendard-regular-normal-mine-shaft-18px\">예약 시작 시간</option>\n          <option v-for=\"time in availableTimes\" :key=\"time\" :value=\"time\"\n            class=\"pretendard-regular-normal-mine-shaft-18px\">\n            {{ time }}\n          </option>\n        </select>\n\n\n        <select v-model=\"endTime\" class=\"time-picker pretendard-regular-normal-mine-shaft-18px\">\n          <option disabled value=\"\" class=\"pretendard-regular-normal-mine-shaft-18px\">예약 종료 시간</option>\n          <option v-for=\"time in availableEndTimes\" :key=\"time\" :value=\"time\"\n            class=\"pretendard-regular-normal-mine-shaft-18px\">\n            {{ time }}\n          </option>\n        </select>\n      </div>\n\n     \n      <input type=\"text\" v-model=\"memberCount\" placeholder=\"인원수를 적어주세요\"\n        class=\"memo-input pretendard-regular-normal-mine-shaft-18px\" maxlength=\"2\"  />\n      <!-- <div class=\"error-message\" v-if=\"memberCountError\">{{ memberCountError }}</div> -->\n      <input type=\"text\" v-model=\"memberName\" placeholder=\"예약자명을 적어주세요\"\n        class=\"memo-input pretendard-regular-normal-mine-shaft-18px\" />\n      <div>\n        <input type=\"text\" v-model=\"memberPhone\" placeholder=\"휴대번호를 적어주세요\"\n          class=\"memo-input pretendard-regular-normal-mine-shaft-18px\" maxlength=\"11\" @input=\"validatePhoneNm\" />\n        <div class=\"error-message\" v-if=\"memberPhoneError\">{{ memberPhoneError }}</div>\n      </div>\n\n\n      <!-- <div class=\"form-group\">\n        <textarea v-model=\"memo\" placeholder=\"예약자명 메모를 남겨주세요\" class=\"memo-input\"></textarea>\n      </div> -->\n\n\n      <div class=\"form-group buttons\">\n        <button class=\"cancel-btn pretendard-bold-white-18px\" @click=\"closeModal\">취소하기</button>\n        <button class=\"confirm-btn pretendard-bold-white-18px\" @click=\"confirmReservation\">{{ isEditMode ? '수정하기' :\n          '확인하기' }}</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { managerStore } from '@/store/managerStore';  // API 호출\n\nexport default {\n  name: \"ManagerReservationModal\",\n  data() {\n    return {\n      memberPhoneError: \"\", /* 24.12.09 수정*/\n      memberPhone: \"\",\n      memberCountError: \"\", /* 24.12.09 수정*/\n      memberCount: \"\",\n      memberName: \"\",\n      startTime: \"\",\n      errorMessage: \"\",\n      endTime: \"\",\n      memo: \"\",\n      availableTimes: [\n        \"00:00\", \"00:30\", \"01:00\", \"01:30\", \"02:00\", \"02:30\", \"03:00\", \"03:30\",\n        \"04:00\", \"04:30\", \"05:00\", \"05:30\", \"06:00\", \"06:30\", \"07:00\", \"07:30\",\n        \"08:00\", \"08:30\", \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",\n        \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\",\n        \"16:00\", \"16:30\", \"17:00\", \"17:30\", \"18:00\", \"18:30\", \"19:00\", \"19:30\",\n        \"20:00\", \"20:30\", \"21:00\", \"21:30\", \"22:00\", \"22:30\", \"23:00\", \"23:30\"\n      ],\n    };\n  },\n  props: {\n    selectedRoom: {\n      type: Object, // 전달받는 데이터 타입 설정 (예시: String 또는 Number)\n      required: true, // 필수 prop 여부\n    },\n    selectedReservation: {\n      type: Object,\n      required: false,\n    },\n    isEditMode: {\n      type: Boolean,\n      default: false,\n    },\n    selectedDate: {\n      type: String,\n      required: true, // selectedDate가 필수임을 명시\n    },\n  },\n  computed: {\n    // 24.12.09 수정 - 추가\n    // 전체 폼 유효성 검사\n    isFormValid() {\n      return !this.memberPhoneError;\n    },\n  },\n  watch: {\n    selectedDate(newDate) {\n      console.log(\"selectedDate 변경 감지:\", newDate);\n      this.getReservationDt();\n    },\n    startTime(newStartTime) {\n      if (newStartTime) {\n        // 예약된 시간에 따라 동적으로 종료 시간 필터링\n        const reservationEnd = this.reservedTimes.reduce((latest, time) => {\n          return time > latest ? time : latest;\n        }, \"\");\n\n        if (newStartTime < reservationEnd) {\n          // 예약된 이전 시간을 선택하면 예약된 이후의 시간을 제외\n          this.availableEndTimes = this.availableTimes.filter(\n            (time) => time > newStartTime && time <= reservationEnd\n          );\n        } else {\n          // 예약된 이후 시간을 선택하면 시작 시간 이후로 종료 가능\n          this.availableEndTimes = this.availableTimes.filter(\n            (time) => time > newStartTime\n          );\n        }\n        console.log(\"[Available End Times]\", this.availableEndTimes);\n      }\n    },\n    endTime(newEndTime) {\n      if (newEndTime && this.startTime) {\n        // 종료 시간이 시작 시간 이전이면 경고 메시지 표시\n        if (newEndTime <= this.startTime) {\n          // this.errorMessage = \"종료 시간은 시작 시간 이후여야 합니다.\";\n          this.endTime = \"\"; // 종료 시간 초기화\n        } else {\n          // this.errorMessage = \"\"; // 오류 메시지 초기화\n        }\n      }\n    },\n  },\n  mounted() {\n    // props로 받은 데이터 출력\n    console.log(\"selectedRoom prop:\", this.selectedRoom);\n    console.log(\"selectedReservation prop:\", this.selectedReservation);\n    console.log(\"isEditMode prop:\", this.isEditMode);\n    this.getReservationDt();\n    // 수정 모드일 때 기존 예약 데이터를 입력 필드에 채움\n    if (this.isEditMode && this.selectedReservation) {\n      const reservation = this.selectedReservation;\n      this.selectedDate = reservation.startTime.slice(0, 10);\n      this.startTime = reservation.startTime.slice(11, 16);\n      this.endTime = reservation.endTime.slice(11, 16);\n      this.memberName = reservation.reser_user || \"\";\n      this.memberPhone = reservation.reser_phone || \"\";\n      this.memberCount = reservation.member || \"\";\n      this.status = reservation.status || \"\";\n    } else if (this.selectedRoom) {\n      // 신규 예약 등록 시\n      this.startTime = \"\";\n      this.endTime = \"\";\n      this.memberName = \"\";\n      this.memberPhone = \"\";\n      this.memberCount = \"\";\n    }\n  },\n  computed: {\n    availableEndTimes() {\n      if (!this.startTime) return this.availableTimes; // 시작 시간이 없으면 모든 시간이 표시됨\n      const reservationEnd = this.reservedTimes.reduce((latest, time) => {\n        return time > latest ? time : latest;\n      }, \"\");\n\n      if (this.startTime < reservationEnd) {\n        // 예약된 이전 시간을 선택하면 예약된 이후의 시간을 제외\n        return this.availableTimes.filter(\n          (time) => time > this.startTime && time <= reservationEnd\n        );\n      }\n      // 예약된 이후 시간을 선택하면 시작 시간 이후로 종료 가능\n      return this.availableTimes.filter((time) => time > this.startTime);\n    },\n  },\n  methods: {\n        // 24.12.09 수정 - 추가\n    // validateCount() {\n    //   const regex = /^\\d{11}$/;\n    //   this.memberCountError = !regex.test(this.memberCount)\n    //     ? \"인원수는 숫자 2자리여야 합니다.\"\n    //     : null;\n    // },\n    // 24.12.09 수정 - 추가\n    validatePhoneNm() {\n      const regex = /^\\d{11}$/;\n      this.memberPhoneError = !regex.test(this.memberPhone)\n        ? \"전화번호는 숫자 11자리여야 합니다.\"\n        : null;\n    },\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, \"0\");\n      const day = String(date.getDate()).padStart(2, \"0\");\n      return `${year}-${month}-${day}`;\n    },\n    filterAvailableTimes() {\n      const now = new Date();\n      const currentHours = String(now.getHours()).padStart(2, \"0\");\n      const currentMinutes = String(now.getMinutes()).padStart(2, \"0\");\n      const currentTimeString = `${currentHours}:${currentMinutes}`;\n\n      console.log(\"[Filter Logic] 현재 시간:\", currentTimeString);\n\n      if (this.selectedDate === this.formatDate(now)) {\n        // 현재 날짜일 경우 현재 시간 이후의 시간만 남기기\n        return this.availableTimes.filter((time) => time >= currentTimeString);\n      }\n      // 미래 날짜는 모든 시간을 표시\n      return this.availableTimes;\n    },\n    async getReservationDt() {\n      try {\n        // 선택된 날짜와 방 매니저 ID 가져오기\n        const date = this.selectedDate;\n        const managerId = this.selectedRoom?.managerid;\n\n        console.log(\"[Step 1] managerId 가져오기:\", managerId);\n        console.log(\"[Step 2] 선택된 날짜:\", date);\n\n        if (!managerId) {\n          console.error(\"[Error] managerId가 없습니다.\");\n          return;\n        }\n\n        console.log(`[Step 3] API 요청 URL: reservations/date/${date}/manager?managerId=${managerId}`);\n        const response = await managerStore.getTask(`reservations/date/${date}/manager?managerId=${managerId}`);\n\n        console.log(\"[Step 4] API 응답 데이터:\", response);\n\n        // 예약된 시간 저장\n        this.reservedTimes = [];\n        response.forEach((room) => {\n          if (room.room_id === this.selectedRoom.room_id) {\n            room.reservations.forEach((reservation) => {\n              if (reservation.status === \"cancel\") return;\n              const startTime = new Date(reservation.startTime).toISOString().slice(11, 16);\n              const endTime = new Date(reservation.endTime).toISOString().slice(11, 16);\n\n              console.log(\"[Step 5] 예약된 시간:\", startTime, \"-\", endTime);\n\n              let currentTime = new Date(`1970-01-01T${startTime}:00Z`);\n              const endTimeObj = new Date(`1970-01-01T${endTime}:00Z`);\n\n              while (currentTime < endTimeObj) {\n                const timeString = currentTime.toISOString().slice(11, 16);\n\n                // 예약된 시간을 reservedTimes에 추가\n                if (!this.reservedTimes.includes(timeString)) {\n                  this.reservedTimes.push(timeString);\n                }\n\n                currentTime.setMinutes(currentTime.getMinutes() + 30); // 30분 단위로 증가\n              }\n            });\n          }\n        });\n\n        console.log(\"[Step 6] 최종 예약된 시간 목록:\", this.reservedTimes);\n\n        // 현재 시간 이후의 시간만 필터링\n        const filteredTimes = this.filterAvailableTimes();\n\n        // isEditMode가 true이면 수정 중인 예약 시간을 포함\n        if (this.isEditMode && this.selectedReservation) {\n          const editingStartTime = this.selectedReservation.startTime.slice(11, 16);\n          const editingEndTime = this.selectedReservation.endTime.slice(11, 16);\n\n          console.log(\"[Step 7] 현재 수정 중인 예약 시간:\", editingStartTime, \"-\", editingEndTime);\n\n          let currentTime = new Date(`1970-01-01T${editingStartTime}:00Z`);\n          const endTimeObj = new Date(`1970-01-01T${editingEndTime}:00Z`);\n\n          while (currentTime < endTimeObj) {\n            const timeString = currentTime.toISOString().slice(11, 16);\n            // 수정 중인 예약 시간은 무조건 포함\n            if (!filteredTimes.includes(timeString)) {\n              filteredTimes.push(timeString);\n            }\n            currentTime.setMinutes(currentTime.getMinutes() + 30);\n          }\n        }\n\n        // reservedTimes를 제외한 availableTimes 설정\n        this.availableTimes = filteredTimes.filter((time) => !this.reservedTimes.includes(time) || this.isEditingTimeIncluded(time));\n\n        console.log(\"[Step 8] 최종 사용 가능한 시간 목록:\", this.availableTimes);\n      } catch (error) {\n        console.error(\"[Error] 예약 시간 가져오기 오류:\", error);\n        alert(\"예약된 시간을 가져오는 중 오류가 발생했습니다.\");\n      }\n    },\n    isEditingTimeIncluded(time) {\n      if (this.isEditMode && this.selectedReservation) {\n        const editingStartTime = this.selectedReservation.startTime.slice(11, 16);\n        const editingEndTime = this.selectedReservation.endTime.slice(11, 16);\n\n        const currentTime = new Date(`1970-01-01T${time}:00Z`);\n        const startTimeObj = new Date(`1970-01-01T${editingStartTime}:00Z`);\n        const endTimeObj = new Date(`1970-01-01T${editingEndTime}:00Z`);\n\n        return currentTime >= startTimeObj && currentTime < endTimeObj;\n      }\n      return false;\n    },\n\n    closeModal() {\n      this.$emit(\"close\");\n    },\n    async confirmReservation() {\n      console.log(\"selectedDate:\", this.selectedDate);\n      console.log(\"startTime:\", this.startTime, \"endTime:\", this.endTime);\n\n      const startTime = `${this.selectedDate}T${this.startTime}:00.000Z`;\n      const endTime = `${this.selectedDate}T${this.endTime}:00.000Z`;\n\n      if (this.memberPhone.length !== 11) {\n        this.errorMessage = \"휴대번호 11자리를 입력해주세요\";\n        return; // 요청 차단\n      }\n      this.errorMessage = \"\";\n\n      if (!this.selectedRoom) {\n        alert(\"방 정보가 누락되었습니다.\");\n        return;\n      }\n      // let userId = null;\n      //   if (this.isEditMode && this.selectedReservation) {\n      //     userId = this.selectedReservation.userId; // 기존 예약의 userId 저장\n      //   }\n      const params = {\n        roomId: this.selectedRoom.room_id,\n        managerid: this.selectedRoom.managerid,\n        startTime,\n        endTime,\n        roomtype: \"Golf\",\n        reser_user: this.memberName,\n        reser_phone: this.memberPhone,\n        member: this.memberCount,\n        agree: true,\n        status: this.isEditMode ? this.status : \"confirm\",\n      };\n      console.log(\"전송할 params 값:\", JSON.stringify(params, null, 2));\n      try {\n        if (this.isEditMode && this.selectedReservation) {\n          console.log(\"수정 모드: 예약 삭제 후 재등록\");\n          const userId = this.selectedReservation.userId;\n          await this.deleteReservation(this.selectedReservation.id);\n          const response = await managerStore.postTask(`reservations/${userId}`, params);\n          if (response) {\n            alert(\"예약이 수정되었습니다.\");\n          }\n        } else {\n          const response = await managerStore.postTask(\"reservations/1\", params);\n          if (response) {\n            this.confirmMsg(); // 파라미터 값 처리 후 주석 풀기\n            alert(\"예약이 등록되었습니다.\");\n          }\n        }\n        this.$emit(\"close\");\n      } catch (error) {\n        console.error(\"API 호출 오류:\", error);\n        alert(\"예약에 실패했습니다. 서버 오류를 확인하세요.\");\n      }\n    },\n\n    // 예약 삭제 메서드\n    async deleteReservation(reservationId) {\n      try {\n        const response = await managerStore.deleteTask(`reservations/${reservationId}`);\n        console.log(\"예약 삭제 완료:\", response);\n      } catch (error) {\n        console.error(\"예약 삭제 오류:\", error);\n        alert(\"예약 삭제에 실패했습니다.\");\n        throw error; // 삭제 실패 시 등록을 진행하지 않도록 예외를 던집니다.\n      }\n    },\n\n    // 예약 확정 메세지 전송\n    async confirmMsg() {\n      const params =\n      {\n        // 해당 파라미터 값 채워 넣기!\n        // \"phoneNumber\": this.phone,\n        // \"userName\": this.name,\n        // \"availableTime\": this.selectedTime + \" ~ \"+ this.selectedEndTime,\n        // \"storeName\": this.getData.name\n      };\n      try {\n        const response = await managerStore.postTask(\n          `v1/sms/confirmReservation`, params\n        );\n        console.log(\"response\", response)\n\n      } catch (error) {\n        console.error(\"API 호출 오류:\", error);\n      }\n\n    }\n\n\n  }\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: #fff;\n  width: 880px;\n  padding: 40px;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n}\n\nh2 {\n  margin-bottom: 20px;\n}\n\n/* .form-group {\n  margin-bottom: 20px;\n} */\n\n.date-picker {\n  width: 100%;\n  height: 60px;\n  /* 24.12.09 수정 - 추가 */\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.time-selectors {\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n}\n\n.time-picker {\n  width: 50%;\n  /* 24.12.09 수정*/\n  height: 60px;\n  /* 24.12.09 수정 - 추가 */\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n/* 24.12.09 수정 */\n.memo-input {\n  width: 100%;\n  /* height:230px; */\n  height: 60px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  resize: none;\n}\n\n.buttons {\n  display: flex;\n  justify-content: space-between;\n}\n\n.cancel-btn,\n.confirm-btn {\n  width: 48%;\n  padding: 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.cancel-btn {\n  /* 24.12.09 수정- 배경색 변경 */\n  background-color: #999999;\n  /* color: #fff; */\n}\n\n.confirm-btn {\n  /* 24.12.09 수정 - 배경색 변경 */\n  background-color: #184199;\n  /* color: #fff; */\n}\n\n/* 24.12.09 수정 */\n.error-message {\n  display: flex;\n  align-items: center;\n  color: var(--monza);\n  font-size: 12px;\n  margin-top: 4px;\n}\n</style>\n"]}]}