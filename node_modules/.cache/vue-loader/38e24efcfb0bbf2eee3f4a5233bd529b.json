{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/BoardWrite.vue?vue&type=script&lang=js","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/BoardWrite.vue","mtime":1734586780303},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js","mtime":1728543112262},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BoardWrite.vue"],"names":[],"mappings":";AA0EA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BoardWrite.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container-center-horizontal\">\n    <div class=\"communitywrite-2 screen\">\n      <Header />\n      <rj-zs-wi :frame72911Props=\"rJZsWIProps.frame72911Props\" :frame72912Props=\"rJZsWIProps.frame72912Props\" />\n      <div class=\"title pretendard-bold-log-cabin-38px\">자유게시판</div>\n      <div class=\"frame-7782-1\">\n        <div class=\"frame-7857-7\">\n          <div class=\"title-box\">\n            <div class=\"content-title pretendard-medium-black-18px\">\n              제목\n            </div>\n            <!-- 24.12.19 수정 - 폰트 추가 -->\n            <input type=\"text\" class=\"frame-7281-8 pretendard-regular-normal-mountain-mist-16px\"\n              placeholder=\"제목을 입력해주세요\" v-model=\"title\" />\n          </div>\n          <div class=\"content-box\">\n            <div class=\"content-title pretendard-medium-black-18px\">\n              내용\n            </div>\n            <!-- 24.12.19 수정 - 폰트 추가, textarea 로 변경 -->\n            <textarea type=\"text\" class=\"frame-7281-9 pretendard-regular-normal-mountain-mist-16px\"\n              placeholder=\"내용을 입력해주세요\" v-model=\"content\" />\n          </div>\n          <!-- 24.11.26 수정 -->\n          <div class=\"title-box file-box\">\n            <div class=\"content-title pretendard-medium-black-18px\">\n              파일\n            </div>\n            <div class=\"file-align\">\n              <div class=\"frame-7487-4\">\n                <!-- 24.12.19 수정 - 폰트 추가 -->\n                <label for=\"file-upload\" class=\"file-upload-label pretendard-regular-normal-mountain-mist-16px\">\n                  <img class=\"fluentfolder-20-filled-4\"\n                    src=\"https://cdn.animaapp.com/projects/66da512d0c22d478015e0e07/releases/66da51d8cf50153cef9952df/img/fluent-folder-20-filled-4.svg\"\n                    alt=\"파일 선택\" />\n                  <input id=\"file-upload\" type=\"file\" accept=\"image/*\" @change=\"handleFileUpload\" class=\"file-input\"\n                    style=\"display: none;\" />\n                  <div class=\"text-1902 valign-text-middle pretendard-regular-normal-granite-gray-14px\">\n                    <!-- {{ selectedFileName }} -->\n                    <!-- 24.11.26 수정 -->\n                    {{ selectedFileName || (imageUrl ? imageUrl.split('/').pop() : '파일을 선택해주세요') }}\n                  </div>\n\n                </label>\n\n              </div>\n              <!-- 24.12.19 수정 - 추가 : 미리보기  -->\n              <div class=\"image-preview\">\n                <img v-if=\"previewImageUrl\" :src=\"previewImageUrl\" alt=\"미리보기\" class=\"preview-image\" />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"frame-7859-3\">\n            <!-- 24.11.22 수정 - 취소시 목록으로 이동 -->\n            <!-- 24.12.19 수정 - 폰트 수정 -->\n            <button class=\"cancel-btn pretendard-medium-white-18px\" @click=\"toGoBoardList\">\n              취소하기\n            </button>\n            <!-- 24.12.19 수정 - 폰트 수정, class 명 수정 -->\n            <button class=\"submit-btn pretendard-medium-white-18px\" @click=\"submit\">\n              <!-- 24.11.26 수정 -->\n              {{ isEditing ? \"수정하기\" : \"등록하기\" }}\n            </button>\n          </div>\n        </div>\n      </div>\n      <x-footer />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Header from \"./Header\";\nimport RjZsWi from \"./RjZsWi\";\nimport XFooter from \"./XFooter\";\nimport { taskStore } from \"@/store/taskStore\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"BoardWrite\",\n  components: {\n    Header,\n    RjZsWi,\n    XFooter,\n  },\n  // 24.11.26 수정 - id 추가\n  props: [\"rJZsWIProps\", \"id\"],\n  data() {\n    return {\n      selectedFileName: \"\",\n      title: \"\",\n      content: \"\",\n      imageUrl: \"\",\n      // author: localStorage.getItem(\"userName\") || \"\",\n      author: \"\", // 24.11.20 수정\n      isEditing: false, // 24.11.26 수정 - 추가\n      userId: 0,\n      previewImageUrl: '', // 24.12.19 수정 - 추가 : 미리보기 이미지 URL\n    };\n  },\n  mounted() {\n    // // 만약 mounted에서 다시 초기화가 필요하다면 아래와 같이 사용 가능\n    // this.author = localStorage.getItem(\"userName\") || \"\";\n    // console.log(\"Author Name (from localStorage):\", this.author);\n\n    // 24.11.20 수정\n    const loginInfo = JSON.parse(localStorage.getItem(\"loginInfo\"));\n    // 만약 mounted에서 다시 초기화가 필요하다면 아래와 같이 사용 가능\n    // this.author = loginInfo.name;\n    // 24.12.09 수정 - 추가:작성자 - 닉네임으로 변경\n    this.author = loginInfo.userName;\n    this.userId = parseInt(loginInfo.id);\n    console.log(\"Author Name (from localStorage):\", this.author);\n  },\n  // 24.11.26 수정 - 추가\n  async created() {\n    const { id } = this.$route.query; // query에서 id 추출\n    if (id) {\n      this.isEditing = true; // 수정 상태로 변경\n      await this.loadBoardData(id); // 서버에서 데이터를 가져옴\n    }\n  },\n  methods: {\n    // 24.11.22 수정 - 추가\n    toGoBoardList() {\n      this.$router.push({ path: \"/board-list\" });\n    },\n    // 24.11.26 수정 - 추가\n    // 기존 자유게시판 데이터 로드 (수정 시)\n    async loadBoardData(id) {\n      try {\n        const response = await taskStore.getSelectTasks(`posts/${id}`);\n        console.log('br response', response)\n\n        this.title = response[0].post_title;\n        this.content = response[0].post_content;\n        this.imageUrl = response[0].post_imageUrl;\n        this.views = response[0].post_views;\n      } catch (error) {\n        console.error(\"자유게시판 데이터를 불러오는 데 실패했습니다:\", error);\n        alert(\"데이터를 불러오지 못했습니다.\");\n      }\n    },\n    async submit() {\n      if (!this.title || !this.content) {\n        alert(\"제목과 내용을 입력해주세요.\");\n        return;\n      }\n\n\n      // POST 요청으로 데이터를 서버에 전송\n      const params = {\n        title: this.title,\n        content: this.content,\n        author: this.author,\n        imageUrl: this.imageUrl ? this.imageUrl : null, // 24.11.26 수정 - 이미지가 있으면 사용, 없으면 null\n        user_id: this.userId,\n        views: this.views\n      };\n\n      // 24.11.26 수정\n      try {\n        // 24.11.26 수정 - 추가\n        if (this.isEditing) {\n          const id = this.$route.query.id; // URL에서 id를 추출\n          console.log('id 123', id)\n          const response = await taskStore.putTask(`posts/${id}`, params);\n\n          console.log('수정 data', params)\n          console.log('수정 response 1', response)\n          alert(\"수정이 되었습니다\");\n\n        } else {\n          const response = await taskStore.postTask(\"posts\", params);\n\n          console.log(\"등록 성공:\", response.data);\n          alert(\"등록이 되었습니다\");\n        }\n\n        this.$router.push({ path: \"/board-list\" });\n      } catch (error) {\n        console.error(\"등록 실패:\", error);\n        alert(\"등록에 실패했습니다.\");\n      }\n    },\n\n    async handleFileUpload(event) {\n      console.log(\"통신 하는 중!!!\");\n      // const token = localStorage.getItem(\"managerToken\");\n      const file = event.target.files[0];\n      this.file = null;\n      this.file = file;\n\n      // 24.12.19 수정 - 추가 : 파일 이름 표시\n      this.selectedFileName = file.name;\n\n      // 24.12.19 수정 - 추가 : 미리보기 처리\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        this.previewImageUrl = e.target.result; // 미리보기 이미지 URL 설정\n      };\n      reader.readAsDataURL(file);\n\n      console.log(file.size);\n      console.log(file.name);\n      console.log(file.type);\n      const params = {\n        fileName: file.name,\n        fileSize: file.size,\n        mimeType: file.type,\n      };\n      console.log(\"통신 하는 중!!!\" + JSON.stringify(this.file));\n\n      // const response = await taskStore.postTask(\n      //   \"v1/files/presigned-url\",\n      //   params\n      // );\n      const token = localStorage.getItem(\"Token\");\n\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n          'accept': '*/*',\n          'Authorization': `Bearer ` + token\n        },\n      };\n      const response = await axios.post(\"http://13.124.62.68:3000/api/v1/files/presigned-url\", params, config);\n      // response = response.data\n      console.log(\"response : : : : :\" + JSON.stringify(response));\n\n      const url = response.data.presignedUrl;\n      console.log(\"response.file.path : : : : :\" + JSON.stringify(url));\n      // const url = 'https://lezuro-bk.s3.ap-northeast-2.amazonaws.com/camera.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6CLHNBRW3AA7JQ5Z%2F20241107%2Fap-northeast-2%2Fs3%2Faws4_request&X-Amz-Date=20241107T074211Z&X-Amz-Expires=3600&X-Amz-Signature=dd4176d8288ed964223f471ff745ffec8943120dadf017fc2f373d91588df626&X-Amz-SignedHeaders=host&x-id=PutObject';\n      this.imageUrl = new URL(url).origin + new URL(url).pathname;\n      try {\n        // 파일 업로드\n        // 2. 프리사인 URL을 사용해 S3에 파일을 업로드합니다.\n        await axios.put(url, file, {\n          headers: {\n            \"Content-Type\": file.type,\n            // 'Content-Length': file.size\n          },\n        });\n        console.log(\"File uploaded successfully!\");\n      } catch (error) {\n        console.error(\"Error uploading file:\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped src=\"@/style/community/boardwrite.css\"></style>\n"]}]}