{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/manager/ManagerContactList.vue?vue&type=style&index=0&id=5805d3a3&prod&scoped=true&lang=css","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/manager/ManagerContactList.vue","mtime":1733816936832},{"path":"/usr/vue/lezuro_all/node_modules/css-loader/dist/cjs.js","mtime":1728542747276},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1728542748492},{"path":"/usr/vue/lezuro_all/node_modules/postcss-loader/src/index.js","mtime":1728542747992},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb250YWN0LWNvbnRhaW5lciB7CiAgd2lkdGg6IDEwMCU7CiAgYmFja2dyb3VuZDogI2Y1ZjZmNjsKICBkaXNwbGF5OiBmbGV4Owp9Cgoud3JhcHBlciB7CiAgcGFkZGluZzogMzBweDsKICB3aWR0aDogMTAwJTsKfQoKLyog7YOA7J207YuAIOuwleyKpCAqLwoudGl0bGUtYm94IHsKICB3aWR0aDogMTAwJTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogIHBhZGRpbmc6IDMwcHg7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKfQoKLmRhdGUtcGlja2VyLWJveCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICBwYWRkaW5nOiAzMHB4Owp9CgouZGF0ZV93cmFwIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5kYXRlX3dyYXAgaW5wdXQgewogIHdpZHRoOiAxNyU7CiAgaGVpZ2h0OiA2MHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7CiAgbWFyZ2luOiAxMXB4OwogIHBhZGRpbmc6IDAgMjBweDsKfQoKCi8qIDI0LjEyLjA5IOyImOyglSAtIOy2lOqwgCovCi5kYXRldGFiLWJ0biB7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGhlaWdodDogNjBweDsKICBwYWRkaW5nOiAxNnB4IDMwcHg7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKICBnYXA6IDEwcHg7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKfQoKLyogMjQuMTIuMDkg7IiY7KCVICovCi5kYXRldGFiLWJ0bi5hY3RpdmUsCi50YWItYnRuLmFjdGl2ZSB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzE4NDE5OTsKICBjb2xvcjogI2ZmZjsKfQoKLnNob3BfdGl0bGUsCi5kYXRlLXBpY2tkZXItdGl0bGUgewogIG1hcmdpbi1yaWdodDogMjMuNXB4OwogIHdoaXRlLXNwYWNlOiBub3dyYXA7Cn0KCi5jb250YWN0X3RvcCB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgd2lkdGg6IDEwMCU7Cn0KCi5jb250YWN0X2xpc3QgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC13cmFwOiB3cmFwOwogIGdhcDogMzBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogIHBhZGRpbmc6IDMwcHg7CiAgbWFyZ2luLXRvcDogMjBweDsKfQoKLnNlYXJjaF9zaG9wIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGdhcDogMTBweDsKfQoKLnNlYXJjaF9ib3ggewogIHdpZHRoOiAxMDAlOwogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgZ2FwOiAxMHB4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KCi5zZWxlY3RfYm94XzEgewogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmxhY2t3aGl0ZXdoaXRlKTsKICBkaXNwbGF5OiBmbGV4OwogIGhlaWdodDogNjBweDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgcGFkZGluZzogMHB4IDIwcHg7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHdpZHRoOiAxNyU7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKfQoKLnNlbGVjdF9ib3hfMSBzZWxlY3QgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBib3JkZXI6IG5vbmU7CiAgb3V0bGluZTogbm9uZTsKCn0KCi5zZWxlY3RfYm94XzIgewogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmxhY2t3aGl0ZXdoaXRlKTsKICBkaXNwbGF5OiBmbGV4OwogIGhlaWdodDogNjBweDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgcGFkZGluZzogMHB4IDIwcHg7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHdpZHRoOiA4MiU7CiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKfQoKLnNlbGVjdF9ib3hfMiBpbnB1dCB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIG91dGxpbmU6IG5vbmU7CiAgYm9yZGVyOiBub25lOwp9CgpidXR0b24gewogIGJvcmRlcjogbm9uZTsKICB3aWR0aDogMTUwcHg7CiAgaGVpZ2h0OiA0NXB4OwogIGxpbmUtaGVpZ2h0OiAyMS40OHB4OwogIGNvbG9yOiAjZmZmZmZmOwogIGJhY2tncm91bmQtY29sb3I6ICNjY2M7Cn0KCi50YWJsZS1jb250YWluZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgd2lkdGg6IDEwMCU7CiAgb3ZlcmZsb3cteDogYXV0bzsKfQoKdGFibGUgewogIHdpZHRoOiAxMDAlOwogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7Cn0KCnRoLAp0ZCB7CiAgcGFkZGluZzogMjZweCAwcHg7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7CiAgdGV4dC1hbGlnbjogY2VudGVyOwoKfQoKdGggewogIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7Cn0KCi5wYWdpbmF0aW9uLWNvbnRyb2xzIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGdhcDogMjBweDsKICBtYXJnaW4tdG9wOiAyMHB4OwogIHdpZHRoOiAxMDAlOwp9CgoucGFnZS1udW1iZXJzIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgZ2FwOiAyMHB4Owp9CgoucGFnZS1udW1iZXIgewogIHdpZHRoOiA0MHB4OwogIGhlaWdodDogNDBweDsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIGJhY2tncm91bmQtY29sb3I6ICNlZWVlZWU7CiAgY3Vyc29yOiBwb2ludGVyOwp9CgoucGFnZS1udW1iZXIuYWN0aXZlIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDMwZjFhOwogIGNvbG9yOiB3aGl0ZTsKfQoKLnBhZ2UtbnVtYmVyOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlZWVlOwp9CgoucGFnaW5hdGlvbi1hcnJvdyB7CiAgY3Vyc29yOiBwb2ludGVyOwp9CgoucGFnaW5hdGlvbi1hcnJvdy5kaXNhYmxlZCB7CiAgb3BhY2l0eTogMC41OwogIGN1cnNvcjogbm90LWFsbG93ZWQ7Cn0KCi5wYWdpbmF0aW9uLWFycm93LmZsaXBwZWQgewogIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7Cn0K"},{"version":3,"sources":["ManagerContactList.vue"],"names":[],"mappings":";AAgZA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ManagerContactList.vue","sourceRoot":"src/components/manager","sourcesContent":["<template>\n  <div class=\"all\">\n    <ManagerHeader />\n    <div class=\"wrap\">\n      <div class=\"contact-container\">\n        <ManagerNavbar />\n        <div class=\"wrapper\">\n          <!-- 타이틀 부분 -->\n          <div class=\"title-box pretendard-bold-normal-black-28px\">1:1 문의</div>\n\n          <!-- 날짜 선택 부분 -->\n          <div class=\"date-picker-box\">\n            <div class=\"date_wrap\">\n              <span class=\"date-pickder-title\">날짜검색</span>\n              <!-- 24.12.09 수정 - 추가 -->\n              <div v-for=\"dateTab in dateTabs\" :key=\"dateTab\"\n                :class=\"['datetab-btn pretendard-regular-normal-mine-shaft-16px', { active: selectedDateTab === dateTab }]\"\n                @click=\"selectDateTab(dateTab)\">\n                {{ dateTab }}\n              </div>\n              <!-- 날짜 선택 부분 -->\n              <!-- <input type=\"date\" class=\"date pretendard-regular-normal-mine-shaft-18px\" v-model=\"startDate\" /> -->\n              <!-- 24.12.09 수정 - 추가 : max, change-->\n              <input type=\"date\" class=\"date pretendard-regular-normal-mine-shaft-18px\" v-model=\"selectedDate.start\"\n                @change=\"validateStartDate\" :max=\"today\" />\n              ~\n              <!-- <input type=\"date\" class=\"date pretendard-regular-normal-mine-shaft-18px\" v-model=\"endDate\" /> -->\n              <!-- 24.12.09 수정 - 추가 : max, change-->\n              <input type=\"date\" class=\"date pretendard-regular-normal-mine-shaft-18px\" v-model=\"selectedDate.end\"\n                @change=\"validateEndDate\" :max=\"today\" />\n            </div>\n            <div class=\"search_shop\">\n              <span class=\"shop_title\">문의검색</span>\n              <div class=\"select_box_1\">\n                <!-- 대회이름을 선택할 수 있는 select box -->\n                <select class=\"text-2536 pretendard-regular-normal-mine-shaft-18px\">\n                  <option value=\"title\">제목</option>\n                </select>\n              </div>\n              <div class=\"select_box_2\">\n                <!-- 검색어 입력 필드 -->\n                <input type=\"text\" class=\"pretendard-regular-normal-mountain-mist-18px\" placeholder=\"검색어를 입력하세요\"\n                  v-model=\"searchQuery\" />\n                <img class=\"search-btn-10\"\n                  src=\"https://cdn.animaapp.com/projects/66da512d0c22d478015e0e07/releases/66da51d8cf50153cef9952df/img/searchbtn-9.svg\"\n                  alt=\"searchBtn\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"contact_list\">\n            <div class=\"contact_top\">\n              <div class=\"contact_title pretendard-bold-24px\">문의 리스트</div>\n              <button class=\"pretendard-regular-normal-mine-shaft-16px\" @click=\"deleteSelected\">\n                선택 삭제\n              </button>\n            </div>\n            <div class=\"table-container\">\n              <table>\n                <thead>\n                  <!-- 24.12.10 수정 - 폰트 추가 -->\n                  <tr class=\"pretendard-bold-mine-shaft-18px\">\n                    <th><input type=\"checkbox\" @click=\"toggleAll\" v-model=\"isAllSelected\"></th>\n                    <th>번호</th>\n                    <th>고객명</th>\n                    <th>1:1문의내역</th>\n                    <th>접수일시</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"(contact, index) in paginatedItems\" :key=\"index\"\n                    class=\"pretendard-semibold-mountain-mist-16px \">\n                    <td><input type=\"checkbox\" v-model=\"selectedContact\" :value=\"contact.id\"></td>\n                    <!-- 24.12.04 수정 - 추가 -->\n                    <td @click=\"toGoContactDetail(contact)\"> {{ contact.id }}</td>\n                    <td @click=\"toGoContactDetail(contact)\">\n                      {{ contact.user_name }}\n                    </td>\n                    <td @click=\"toGoContactDetail(contact)\">{{ contact.title }}</td>\n                    <td @click=\"toGoContactDetail(contact)\">{{ contact.createdAt.split('T')[0] }}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            <div class=\"pagination-controls\">\n              <img class=\"pagination-arrow\" @click=\"prevPage\" :src=\"arrowLeftImage\" :alt=\"'Previous'\"\n                :class=\"{ disabled: currentPage === 1 }\" />\n              <!-- 24.12.10 수정 - 폰트 추가 -->\n              <div class=\"page-numbers pretendard-medium-log-cabin-16px\">\n                <!-- 24.12.09 수정 - 추가 -->\n                <div v-for=\"page in visiblePages\" :key=\"page\" :class=\"['page-number', { active: page === currentPage }]\"\n                  @click=\"goToPage(page)\">\n                  {{ page }}\n                </div>\n              </div>\n              <img class=\"pagination-arrow flipped\" @click=\"nextPage\" :src=\"arrowRightImage\" :alt=\"'Next'\"\n                :class=\"{ disabled: currentPage === totalPages }\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { managerStore } from '../../store/managerStore';  // API 호출\nimport ManagerHeader from './ManagerHeader.vue';\nimport ManagerNavbar from \"./ManagerNavbar.vue\";\n\nexport default {\n  name: \"AdminContactList\",\n  components: {\n    ManagerHeader,\n    ManagerNavbar,\n  },\n  data() {\n    return {\n      selectedDate: {\n        start: '',\n        end: '',\n      },\n      // 24.12.09 수정 - 추가\n      selectedDateTab: \"전체\",\n      // 24.12.09 수정 - 추가\n      dateTabs: [\"전체\"],\n      selectedShop: \"\",\n      searchTitle: \"\",\n      contact: [\n      ],\n      searchQuery: \"\",\n      arrowLeftImage:\n        \"https://cdn.animaapp.com/projects/66da512d0c22d478015e0e07/releases/66da51d8cf50153cef9952df/img/iconamoon-arrow-up-2-thin.svg\", // 왼쪽 화살표 이미지 URL\n      arrowRightImage:\n        \"https://cdn.animaapp.com/projects/66da512d0c22d478015e0e07/releases/66da51d8cf50153cef9952df/img/iconamoon-arrow-up-2-thin.svg\", // 오른쪽 화살표 이미지 URL\n      currentPage: 1,\n      itemsPerPage: 5, // Display 5 items per page\n      selectedContact: [],\n    };\n  },\n  computed: {\n    // 24.12.09 수정 - 추가 : 오늘날짜 계산\n    today() {\n      const date = new Date();\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0'); // 월은 0부터 시작\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    // 24.12.09 수정 - 추가 : 동적으로 표시할 페이지 번호 계산\n    visiblePages() {\n      const totalPages = this.totalPages;\n      const currentPage = this.currentPage;\n      const maxVisiblePages = 5;\n\n      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\n      let endPage = startPage + maxVisiblePages - 1;\n\n      if (endPage > totalPages) {\n        endPage = totalPages;\n        startPage = Math.max(1, endPage - maxVisiblePages + 1);\n      }\n\n      return Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);\n    },\n    filteredContacts() {\n      let result = this.contact;\n\n      // 제목 검색\n      if (this.searchTitle) {\n        const query = this.searchQuery.toLowerCase();\n        result = result.filter((contact) =>\n          contact.title.toLowerCase().includes(query)\n        );\n      }\n\n      // 검색어 필터\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        result = result.filter(\n          (contact) =>\n            contact.title.toLowerCase().includes(query) ||\n            contact.branchName.toLowerCase().includes(query)\n        );\n      }\n      // 날짜 검색 필터\n      if (this.selectedDate.start && this.selectedDate.end) {\n        const startDate = new Date(this.selectedDate.start);\n        let endDate = new Date(this.selectedDate.end);\n\n        // endDate가 선택된 경우, 시간을 23:59:59로 설정\n        endDate.setHours(23, 59, 59, 999);\n\n        result = result.filter(\n          (contact) =>\n            new Date(contact.createdAt) >= startDate && new Date(contact.createdAt) <= endDate\n        );\n      } else if (this.selectedDate.start) {\n        // startDate만 있을 경우 필터링\n        const startDate = new Date(this.selectedDate.start);\n        result = result.filter((contact) => new Date(contact.createdAt) >= startDate);\n      } else if (this.selectedDate.end) {\n        // endDate만 있을 경우 필터링, 시간을 23:59:59로 설정\n        const endDate = new Date(this.selectedDate.end);\n        endDate.setHours(23, 59, 59, 999);\n        result = result.filter((contact) => new Date(contact.createdAt) <= endDate);\n      }\n\n      // 24.12.09 수정 - 추가\n      // 전체 탭이 선택되었으면 모든 데이터를 반환\n      if (this.selectedDateTab === \"전체\") {\n        return result;\n      }\n\n      // 24.12.09 수정 - 추가\n      // 날짜 검색 필터\n      if (this.selectedDate.start || this.selectedDate.end) {\n        const startDate = this.selectedDate.start ? new Date(this.selectedDate.start) : null;\n        const endDate = this.selectedDate.end ? new Date(this.selectedDate.end) : null;\n\n        result = result.filter((list) => {\n          const createdAt = new Date(list.createdAt);\n          if (startDate && createdAt < startDate) return false; // 시작 날짜 이전 데이터 제외\n          if (endDate && createdAt > endDate) return false; // 종료 날짜 이후 데이터 제외\n          return true;\n        });\n      }\n\n      return result;\n    },\n    totalPages() {\n      return Math.ceil(this.filteredContacts.length / this.itemsPerPage);\n    },\n    paginatedItems() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      return this.filteredContacts.slice(start, start + this.itemsPerPage);\n    },\n    isAllSelected() {\n      return (\n        this.paginatedItems.length > 0 &&\n        this.paginatedItems.every(contact => this.selectedContact.includes(contact.id))\n      );\n    },\n  },\n  mounted() {\n    this.getAsk()\n  },\n  // 24.12.09 수정 - 추가\n  watch: {\n    filteredContacts() {\n      this.currentPage = 1; // 검색 결과 변경 시 첫 페이지로 이동\n    },\n  },\n  methods: {\n    // 24.12.09 수정 - 추가\n    selectDateTab(dateTab) {\n      this.selectedDateTab = dateTab;\n      if (dateTab === \"전체\") {\n        // 전체를 선택하면 날짜 초기화\n        this.selectedDate.start = \"\";\n        this.selectedDate.end = \"\";\n      }\n    },\n    // 24.12.09 수정 - 추가\n    validateStartDate() {\n      const today = new Date();\n      if (new Date(this.selectedDate.start) > today) {\n        alert(\"오늘 이후의 날짜는 선택할 수 없습니다.\");\n        this.selectedDate.start = \"\"; // 초기화\n      } else if (this.selectedDate.end && new Date(this.selectedDate.start) > new Date(this.selectedDate.end)) {\n        alert(\"시작 날짜는 종료 날짜보다 늦을 수 없습니다.\");\n        this.selectedDate.start = \"\"; // 초기화\n      }\n      this.selectedDateTab = \"\"; // 전체 탭 해제\n    },\n    // 24.12.09 수정 - 추가\n    validateEndDate() {\n      const today = new Date();\n      if (new Date(this.selectedDate.end) > today) {\n        alert(\"오늘 이후의 날짜는 선택할 수 없습니다.\");\n        this.selectedDate.end = \"\"; // 초기화\n      } else if (this.selectedDate.start && new Date(this.selectedDate.end) < new Date(this.selectedDate.start)) {\n        alert(\"종료 날짜는 시작 날짜보다 이를 수 없습니다.\");\n        this.selectedDate.end = \"\"; // 초기화\n      }\n      this.selectedDateTab = \"\"; // 전체 탭 해제\n    },\n    async getAsk() {\n      try {\n        const response = await managerStore.getTask(`inquiries`);\n        console.log(\"response ask\", response);\n\n        // 로컬 스토리지에서 managerInfo 가져오기\n        const managerInfo = JSON.parse(localStorage.getItem('managerInfo'));\n\n        // managerInfo가 없는 경우 에러 처리\n        if (!managerInfo) {\n          console.error(\"managerInfo 없음\");\n          return;\n        }\n\n        // managerTokenId 추출\n        const managerTokenName = managerInfo.identifier;\n        console.log('managerTokenName', managerTokenName);\n\n\n        // managerTokenId와 branchId가 같은 데이터만 필터링\n        const filteredBranches = response.filter(item => item.branchName === managerTokenName);\n\n        console.log('Filtered Branches:', filteredBranches);\n\n        // 필터링된 데이터 저장\n        this.contact = filteredBranches;\n\n\n      } catch (error) {\n        console.error(\"Error fetching contactList data:\", error);\n      }\n    },\n\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    goToPage(page) {\n      // this.currentPage = page;\n      // 24.12.09 수정 - 추가\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    },\n    toGoContactDetail(item) {\n      // Step 1: 클릭된 항목의 전체 정보와 ID 출력\n      console.log(\"Step 1: 클릭된 A/S 항목\", item);\n      console.log(\"Step 1: 선택된 A/S 항목 ID:\", item.id);\n\n      if (item.id) {\n        // Step 2: 라우터 이동 전 ID 출력\n        console.log(\"Step 2: 라우터 이동 준비, ID:\", item.id);\n\n        // 라우터로 페이지 이동\n        this.$router.push({\n          path: \"/managercontact-detail\",\n          query: { id: item.id }\n        });\n\n        // Step 3: 라우터 이동 후 출력 (라우터의 beforeEach 훅에서 확인 가능)\n        console.log(\"Step 3: 라우터 이동 완료\");\n      } else {\n        console.error(\"Step 1: 항목에 ID가 없습니다:\", item);\n      }\n    },\n    toggleAll() {\n      if (this.isAllSelected) {\n        // Unselect all\n        this.selectedContact = this.selectedContact.filter(\n          contactId => !this.paginatedItems.some(contact => contact.id === contactId)\n        );\n      } else {\n        // Select all\n        const newSelection = this.paginatedItems\n          .filter(contact => !this.selectedContact.includes(contact.id))\n          .map(contact => contact.id);\n        this.selectedContact = this.selectedContact.concat(newSelection);\n      }\n    },\n    async deleteSelected() {\n      if (this.selectedContact.length === 0) {\n        alert(\"삭제할 항목을 선택해주세요.\");\n        return;\n      }\n\n      if (confirm(\"선택된 항목을 정말 삭제하시겠습니까?\")) {\n        for (var a = 0; a < this.selectedContact.length; a++) {\n          const res = await managerStore.deleteTask(`inquiries/${this.selectedContact[a]}`);\n          console.log(\"manager : : : \", res)\n        }\n        // console.log(\"this.selectedContact : : \" , this.selectedContact)\n\n        // Delete selected contacts\n        this.contact = this.contact.filter(\n          contact => !this.selectedContact.includes(contact.id)\n        );\n        this.selectedContact = [];\n\n        // Adjust current page if necessary\n        if (this.currentPage > this.totalPages) {\n          this.currentPage = this.totalPages || 1;\n        }\n      }\n    },\n  },\n};\n</script>\n<style scoped>\n.contact-container {\n  width: 100%;\n  background: #f5f6f6;\n  display: flex;\n}\n\n.wrapper {\n  padding: 30px;\n  width: 100%;\n}\n\n/* 타이틀 박스 */\n.title-box {\n  width: 100%;\n  background-color: #fff;\n  padding: 30px;\n  margin-bottom: 20px;\n}\n\n.date-picker-box {\n  background-color: #fff;\n  padding: 30px;\n}\n\n.date_wrap {\n  display: flex;\n  align-items: center;\n}\n\n.date_wrap input {\n  width: 17%;\n  height: 60px;\n  border: 1px solid #ddd;\n  margin: 11px;\n  padding: 0 20px;\n}\n\n\n/* 24.12.09 수정 - 추가*/\n.datetab-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 60px;\n  padding: 16px 30px;\n  border: 1px solid #ddd;\n  gap: 10px;\n  background-color: #fff;\n}\n\n/* 24.12.09 수정 */\n.datetab-btn.active,\n.tab-btn.active {\n  background-color: #184199;\n  color: #fff;\n}\n\n.shop_title,\n.date-pickder-title {\n  margin-right: 23.5px;\n  white-space: nowrap;\n}\n\n.contact_top {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.contact_list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  background-color: #fff;\n  padding: 30px;\n  margin-top: 20px;\n}\n\n.search_shop {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 10px;\n}\n\n.search_box {\n  width: 100%;\n  background-color: #fff;\n  gap: 10px;\n  align-items: center;\n}\n\n.select_box_1 {\n  align-items: center;\n  background-color: var(--blackwhitewhite);\n  display: flex;\n  height: 60px;\n  justify-content: space-between;\n  padding: 0px 20px;\n  position: relative;\n  width: 17%;\n  border: 1px solid #ddd;\n}\n\n.select_box_1 select {\n  width: 100%;\n  height: 100%;\n  border: none;\n  outline: none;\n\n}\n\n.select_box_2 {\n  align-items: center;\n  background-color: var(--blackwhitewhite);\n  display: flex;\n  height: 60px;\n  justify-content: space-between;\n  padding: 0px 20px;\n  position: relative;\n  width: 82%;\n  border: 1px solid #ddd;\n}\n\n.select_box_2 input {\n  width: 100%;\n  height: 100%;\n  outline: none;\n  border: none;\n}\n\nbutton {\n  border: none;\n  width: 150px;\n  height: 45px;\n  line-height: 21.48px;\n  color: #ffffff;\n  background-color: #ccc;\n}\n\n.table-container {\n  background-color: #fff;\n  width: 100%;\n  overflow-x: auto;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\n\nth,\ntd {\n  padding: 26px 0px;\n  border-bottom: 1px solid #ddd;\n  text-align: center;\n\n}\n\nth {\n  background-color: #f5f5f5;\n}\n\n.pagination-controls {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-top: 20px;\n  width: 100%;\n}\n\n.page-numbers {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n}\n\n.page-number {\n  width: 40px;\n  height: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  background-color: #eeeeee;\n  cursor: pointer;\n}\n\n.page-number.active {\n  background-color: #d30f1a;\n  color: white;\n}\n\n.page-number:hover {\n  background-color: #eeeeee;\n}\n\n.pagination-arrow {\n  cursor: pointer;\n}\n\n.pagination-arrow.disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.pagination-arrow.flipped {\n  transform: rotate(180deg);\n}\n</style>\n"]}]}