{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/manager/NicePayConfirm.vue?vue&type=script&lang=js","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/manager/NicePayConfirm.vue","mtime":1735266917535},{"path":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js","mtime":1728543112262},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBtZXRob2RzOiB7CiAgICBoYW5kbGVDb25maXJtKCkgewogICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgiL21hbmFnZXJwb2ludC1tYW5hZ2VtZW50Iik7CiAgICAgIC8vIGFsZXJ0KCLtmZXsnbgg67KE7Yq8IO2BtOumreuQqCIpOwogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["NicePayConfirm.vue"],"names":[],"mappings":";AA8HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NicePayConfirm.vue","sourceRoot":"src/components/manager","sourcesContent":["<!-- <script setup>\nimport { onMounted, ref } from 'vue';\nimport axios from 'axios'; // Axios로 HTTP 요청 처리\n\n// 인증 결과 파라미터\nconst authResultCode = ref(\"\");\nconst authResultMsg = ref(\"\");\nconst nextAppURL = ref(\"\");\nconst txTid = ref(\"\");\nconst authToken = ref(\"\");\nconst payMethod = ref(\"\");\nconst mid = ref(\"\");\nconst moid = ref(\"\");\nconst amt = ref(\"\");\nconst reqReserved = ref(\"\");\nconst netCancelURL = ref(\"\");\n\n// 승인 결과\nconst response = ref(\"\");\nconst merchantKey =\n  \"33F49GnCMS1mFYlGXisbUDzVf2ATWCl9k3R++d5hDd3Frmuos/XLx8XhXpe+LDYAbpGKZYSwtlyyLOtS/8aD7A==\"; // 상점키\n\n// POST 요청 함수\nasync function reqPost(data, url) {\n  try {\n    const res = await axios.post(url, data, {\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    });\n    return res.data;\n  } catch (error) {\n    console.error(\"API 호출 오류:\", error);\n    throw error;\n  }\n}\n\n// JSON 응답 처리\nfunction jsonRespDump(resp) {\n  for (const [key, value] of Object.entries(resp)) {\n    console.log(`${key}: ${value}`);\n  }\n}\n\n// 결제 승인 처리\nasync function handlePayment() {\n    console.log(\"authResultCode\",authResultCode.value)\n    \n  if (authResultCode.value === \"0000\") {\n    const ediDate = new Date().toISOString().replace(/[-:T.]/g, \"\").slice(0, 14);\n    const signData = CryptoJS.SHA256(\n      authToken.value + mid.value + amt.value + ediDate + merchantKey\n    ).toString(CryptoJS.enc.Hex);\n\n    const requestData = {\n      TID: txTid.value,\n      AuthToken: authToken.value,\n      MID: mid.value,\n      Amt: amt.value,\n      EdiDate: ediDate,\n      SignData: signData,\n      CharSet: \"utf-8\",\n    };\n\n    try {\n      response.value = await reqPost(requestData, nextAppURL.value);\n      jsonRespDump(response.value);\n    } catch (error) {\n      console.error(\"승인 요청 실패. 망취소 진행 중...\");\n      const cancelData = {\n        TID: txTid.value,\n        AuthToken: authToken.value,\n        MID: mid.value,\n        Amt: amt.value,\n        EdiDate: ediDate,\n        SignData: signData,\n        NetCancel: \"1\",\n        CharSet: \"utf-8\",\n      };\n      response.value = await reqPost(cancelData, netCancelURL.value);\n      jsonRespDump(response.value);\n    }\n  } else {\n    console.error(\"인증 실패:\", authResultCode.value, authResultMsg.value);\n  }\n}\n\n// Vue 컴포넌트가 로드되면 실행\nonMounted(() => {\n    console.log(\"authResultCode\",authResultCode)\n  // PHP POST 데이터를 JavaScript로 받는 로직 필요\n  // 예제에서는 기본 값 설정\n  authResultCode.value = \"0000\"; // 예제 값\n  authResultMsg.value = \"성공\"; // 예제 값\n  nextAppURL.value = \"https://example.com/nextApp\";\n  txTid.value = \"test123\";\n  authToken.value = \"token123\";\n  payMethod.value = \"CARD\";\n  mid.value = \"testMID\";\n  moid.value = \"testOrder123\";\n  amt.value = \"1000\";\n  reqReserved.value = \"reserved123\";\n  netCancelURL.value = \"https://example.com/netCancel\";\n\n  // 결제 승인 처리 호출\n  handlePayment();\n});\n</script> -->\n\n<template>\n  <div class=\"payment-complete-container\">\n    <div class=\"payment-complete-box\">\n      <!-- 아이콘 -->\n      <div class=\"icon\">\n        <img src=\"../../../img/checked-img.png\" alt=\"\"></img>\n      </div>\n      <!-- 메시지 -->\n      <div class=\"message\">\n        <p><span class=\"bold-text\">결제가 완료</span>되었습니다.</p>\n        <p>이용해주셔서 감사합니다.</p>\n      </div>\n      <!-- 확인 버튼 -->\n      <button class=\"confirm-button\" @click=\"handleConfirm\">확인</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    handleConfirm() {\n      window.location.replace(\"/managerpoint-management\");\n      // alert(\"확인 버튼 클릭됨\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* 전체 컨테이너 */\n.payment-complete-container {\n  display: flex;\n  justify-content: center; /* 수평 중앙 정렬 */\n  align-items: center;    /* 수직 중앙 정렬 */\n  height: 100vh;          /* 뷰포트 전체 높이 */\n  width: 100vw;           /* 화면 전체 너비 */\n  background-color: #f8f9fa; /* 배경색 */\n}\n\n.payment-complete-box {\n  display: flex; /* Flexbox 활성화 */\n  flex-direction: column; /* 세로 배치 */\n  /* justify-content: center;  */\n  align-items: center;     /* 가로 중앙 정렬 */\n  text-align: center;\n  background-color: #fff; /* 박스 배경색 */\n  border-radius: 8px;\n  padding: 40px;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* 박스 그림자 */\n  width: 40%; /* 너비는 화면의 50% */\n  height: 100vh; /* 높이는 뷰포트의 70% */\n}\n\n.icon {\n  margin-bottom: 60px;\n  margin-top: calc(100vh / 3); /* 화면 높이의 1/3 */\n}\n\n.message {\n  margin-bottom: 60px;\n  font-size: 16px;\n  color: #333;\n  line-height: 1.5;\n}\n\n.confirm-button {\n  background-color: #2b56e4; /* 버튼 색상 */\n  color: white;\n  border: none;\n  width: 60%;\n  border-radius: 4px;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.confirm-button:hover {\n  background-color: #1a3db8; /* 버튼 호버 색상 */\n}\n\n.bold-text {\n  font-weight: bold; /* 글자를 굵게 처리 */\n  font-size: 18px;   /* 글자 크기 */\n  color: #333;       /* 글자 색상 */\n  margin-bottom: 10px;\n}\n</style>\n\n"]}]}