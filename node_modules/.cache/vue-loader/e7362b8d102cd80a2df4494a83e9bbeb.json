{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/manager/ManagerRoom.vue?vue&type=style&index=0&id=318c8d72&prod&scoped=true&lang=css","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/manager/ManagerRoom.vue","mtime":1734938085664},{"path":"/usr/vue/lezuro_all/node_modules/css-loader/dist/cjs.js","mtime":1728542747276},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1728542748492},{"path":"/usr/vue/lezuro_all/node_modules/postcss-loader/src/index.js","mtime":1728542747992},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qIOyghOyytCDsu6jthYzsnbTrhIjsnZgg67Cw6rK97IOJIOyEpOyglSAqLwoucmVzZXJ2YXRpb24tY29udGFpbmVyIHsKICBiYWNrZ3JvdW5kOiAjZjVmNmY2OwogIGRpc3BsYXk6IGZsZXg7CiAgaGVpZ2h0OiAxMDAlOwogIC8qIOq4sOuzuOqwkuydtCDshLjroZzrsKntlqXsnbggZmxleC1kaXJlY3Rpb27snYQg6rCA66Gc67Cp7Zal7Jy866GcIOyEpOyglSAqLwogIGZsZXgtZGlyZWN0aW9uOiByb3c7Cn0KCi8qIDI0LjEyLjIzIOyImOyglSAqLwoud3JhcHBlciB7CiAgICB3aWR0aDogMTAwJTsKICAgIHBhZGRpbmc6IDMwcHg7CiAgICAvKiBnYXA6IDIwcHg7ICovCiAgICBoZWlnaHQ6IDEwMHZoOwp9CgoKLyog7YOA7J207YuAIOuwleyKpCAqLwoudGl0bGUtYm94IHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogIHBhZGRpbmc6IDMwcHg7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKfQoKLyog64Kg7KecIOyEoO2DnSDrsJXsiqQgKi8KLmRhdGUtcGlja2VyLWJveCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICBwYWRkaW5nOiAzMHB4OwogIG1hcmdpbi1ib3R0b206IDIwcHg7Cn0KCi8qIDI0LjExLjExIOyImOyglSAqLwouZGF0ZSB7CiAgd2lkdGg6IDI1MHB4OwogIGhlaWdodDogNjBweDsKICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogIHBhZGRpbmc6IDAgMjBweDsKfQoKLyog67CpIOumrOyKpO2KuCDrsJXsiqQgKi8KLnJvb20tbGlzdC1ib3ggewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC13cmFwOiB3cmFwOwogIGdhcDogMjBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogIHBhZGRpbmc6IDIwcHg7CiAgcGFkZGluZy1ib3R0b206IDEzMHB4Owp9CgovKiDqsJzrs4Qg67CpIOuwleyKpCAqLwoucm9vbS1ib3ggewogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgcGFkZGluZzogNDBweCAzMHB4OwogIHdpZHRoOiAyNzBweDsKICBoZWlnaHQ6IDI3MHB4OwogIGJvcmRlci1yYWRpdXM6IDVweDsKICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwp9CgovKiDrsKkg7KCc66qp6rO8IOyYiOyVvSDrsoTtirwgKi8KLnJvb20taGVhZGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBtYXJnaW4tYm90dG9tOiAxMHB4Owp9CgoucmVzZXJ2ZS1idG4gewogIGJhY2tncm91bmQtY29sb3I6ICNFMzRENTU7CiAgY29sb3I6ICNmZmY7CiAgYm9yZGVyOiBub25lOwogIHBhZGRpbmc6IDVweDsKICBib3JkZXItcmFkaXVzOiA0cHg7Cn0KCi8qIOyDge2DnCDtkZzsi5wgKi8KLnJvb20tc3RhdHVzIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBnYXA6IDZweDsKICBtYXJnaW4tYm90dG9tOiAxMHB4Owp9Cgouc3RhdHVzLWxhYmVsIHsKICBwYWRkaW5nOiA3LjVweCA2LjVweDsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgY29sb3I6ICNmZmY7Cn0KCi5yb29tLWJveC5hdmFpbGFibGUgewogIGJvcmRlci1jb2xvcjogIzE0QjY1NTsKfQoKLnJvb20tYm94LndhaXRpbmcgewogIGJvcmRlci1jb2xvcjogI0QzMEYxQTsKfQoKLnJvb20tYm94LnVwY29taW5nIHsKICBib3JkZXItY29sb3I6ICMxODQxOTk7Cgp9CgouYXZhaWxhYmxlIC5zdGF0dXMtbGFiZWwgewogIGJhY2tncm91bmQtY29sb3I6ICMxNEI2NTU7Cn0KCi5hdmFpbGFibGUgLnJlc2VydmF0aW9uLXRpbWUgewogIGNvbG9yOiAjMTRCNjU1Owp9Cgoud2FpdGluZyAuc3RhdHVzLWxhYmVsIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjRDMwRjFBOwoKfQoKLndhaXRpbmcgLnJlc2VydmF0aW9uLXRpbWUgewogIGNvbG9yOiAjRDMwRjFBCn0KCi51cGNvbWluZyAuc3RhdHVzLWxhYmVsIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTg0MTk5Owp9CgoudXBjb21pbmcgLnJlc2VydmF0aW9uLXRpbWUgewogIGNvbG9yOiAjMTg0MTk5Owp9CgoucmVzZXJ2YXRpb24tdGltZSB7CiAgY29sb3I6ICMzMzM7Cn0KCi8qIOyYiOyVvSDsg4HshLggKi8KLnJlc2VydmF0aW9uLWRldGFpbHMgewogIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7CiAgYm9yZGVyLXJhZGl1czogNXB4OwogIHBhZGRpbmc6IDEwcHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIGJvcmRlcjogbm9uZTsKfQoKLnJlc2VydmF0aW9uLXRpbWUgewoKICBsZXR0ZXItc3BhY2luZzogLTFweDsKfQoKLnJlc2VydmF0aW9uLWFjdGlvbnMgewogIGRpc3BsYXk6IGZsZXg7Cn0KCi5yZXNlcnZhdGlvbi10aW1lLWJsb2NrIHsKICBsZXR0ZXItc3BhY2luZzogLTFweDsKfQoKLmRlbGV0ZS1idG4sCi5lZGl0LWJ0biB7CiAgbGV0dGVyLXNwYWNpbmc6IC0ycHg7CiAgYmFja2dyb3VuZDogbm9uZTsKICBib3JkZXI6IG5vbmU7CiAgY29sb3I6ICNEMzBGMUE7CiAgZ2FwOiA2cHg7CiAgY3Vyc29yOiBwb2ludGVyOwp9CgouZWRpdC1idG4gewogIGNvbG9yOiAjMTg0MTk5Owp9CgovKiArTW9yZSDrsoTtirwgKi8KLm1vcmUtYnRuIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgY29sb3I6ICNiYmI7CiAgY3Vyc29yOiBwb2ludGVyOwp9Cgouc2Nyb2xsLWNvbnRhaW5lciB7CiAgbWF4LWhlaWdodDogbm9uZTsKICBvdmVyZmxvdy15OiBoaWRkZW47Cn0KCi8qIOyKpO2BrOuhpCDqsIDriqXtlZwg7IOB7YOc7J28IOuVjCDsiqTtgazroaTrsJQg7KCB7JqpICovCi5zY3JvbGwtY29udGFpbmVyLnNjcm9sbGFibGUgewogIG1heC1oZWlnaHQ6IDE1MHB4OwogIC8qIDTqsJwg7J207IOB7J2YIOyYiOyVveydtCDsnojsnYQg65WMIOyKpO2BrOuhpOuwlOqwgCDsg53quYAgKi8KICBvdmVyZmxvdy15OiBhdXRvOwp9Cg=="},{"version":3,"sources":["ManagerRoom.vue"],"names":[],"mappings":";AAyZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ManagerRoom.vue","sourceRoot":"src/components/manager","sourcesContent":["<template>\n  <div class=\"all\">\n    <ManagerHeader />\n    <div class=\"wrap\">\n      <div class=\"reservation-container\">\n        <ManagerNavbar />\n        <div class=\"wrapper\">\n          <!-- 타이틀 부분 -->\n          <div class=\"title-box \">\n            <h2 class=\"pretendard-bold-normal-black-28px\">예약관리</h2>\n          </div>\n\n          <!-- 날짜 선택 부분 -->\n          <div class=\"date-picker-box\">\n            <input type=\"date\" class=\"date pretendard-regular-normal-mine-shaft-18px \" v-model=\"selectedDate\" />\n          </div>\n\n\n          <!-- 룸 리스트 부분 -->\n          <div class=\"room-list-box\" v-if=\"availableRoom.length > 0\">\n            <div v-for=\"room in availableRoom\" :key=\"room.id\" :class=\"['room-box', room.status]\">\n              <div class=\"room-header\">\n                <span class=\"pretendard-bold-normal-black-28px\">{{ room.room_id }} 번방</span>\n                <button class=\"reserve-btn pretendard-medium-white-14px\" @click=\"openModal(room)\">예약하기</button>\n              </div>\n\n              <div class=\"room-status\">\n                <span class=\"status-label pretendard-medium-white-12px\" :class=\"room.status\">{{ room.status ===\n                  \"available\" ? \"이용중\" : room.status === \"waiting\" ? \"대기중\" : \"예약\" }}</span>\n                <div v-if=\"room.reservations && room.reservations.length\">\n                  <span v-if=\"room.status !== 'waiting' && room.reservations[0].check === '사이값'\"\n                    class=\"reservation-time pretendard-bold-24px\">{{ room.reservations[0].startTime.slice(11, 16) }} ~\n                    {{ room.reservations[0].endTime.slice(11, 16) }}</span>\n                </div>\n              </div>\n\n            \n\n              <!-- 예약 목록 -->\n              <!--   <div v-if=\"room.reservations && room.reservations.length\">aaabbbccc</div> -->\n              <div :class=\"['scroll-container', { 'scrollable': shouldScrollBeVisible(room) }]\"\n                v-if=\"room.status !== 'waiting'\">\n                <div v-if=\"room.reservations && room.reservations.length\">\n                  <!-- 처음 2개의 예약을 항상 표시 -->\n                  <div v-for=\"(reservation) in visibleReservations(room)\" :key=\"reservation.id\"\n                    class=\"reservation-details\" v-if=\"reservation.check === '초과값' || reservation.check === '사이값'\">\n                    <div class=\"reservation-time-block pretendard-regular-normal-black-14px\">\n\n                      예약 {{ reservation.startTime.slice(11, 16) }} ~ {{ reservation.endTime.slice(11, 16) }}\n                    </div>\n                    \n                    <div class=\"reservation-actions\">\n                      <button class=\"delete-btn pretendard-medium-normal-granite-gray-12px\" @click=\"delReservation(reservation.id)\">삭제</button>\n                      <span>|</span>\n                      <button class=\"edit-btn pretendard-medium-normal-granite-gray-12px\" @click=\"editReservation(reservation, room)\">수정</button>\n                    </div>\n                  </div>\n\n                  <!-- +MORE 버튼 -->\n\n                  <div v-show=\"shouldShowMoreButton(room)\" class=\"more-btn\" @click=\"showMoreReservations(room)\">\n                    + MORE\n                  </div>\n\n                </div>\n\n              </div>\n\n            </div>\n           \n            <ManagerReservationModal v-if=\"isModalVisible\" @close=\"closeModal\" :selectedRoom = selectedRoom :selectedReservation= selectedReservation    :isEditMode=\"isEditMode\"    :selectedDate=\"selectedDate\" />\n          </div>\n          <div v-else>홈페이지 관리에서 룸을 등록해주세요.</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n\n\nimport ManagerReservationModal from \"./ManagerReservationModal.vue\";\nimport ManagerHeader from \"./ManagerHeader.vue\";\nimport ManagerNavbar from \"./ManagerNavbar.vue\";\nimport { managerStore } from '@/store/managerStore';  // API 호출\nimport { ref } from 'vue';\n\n\nexport default {\n  name: \"ManagerRoom\",\n  components: {\n    ManagerReservationModal,\n    ManagerHeader,\n    ManagerNavbar,\n  },\n  data() {\n    return {\n      selectedReservation: null,\n      isModalVisible: false,\n      selectedDate: \"2024-12-15\",\n      currentDate: \"\",\n      currentTime: \"\",\n      currentDateTime: \"\",\n      availableRoom: [],\n      deletedReservation: null,\n      selectedRoom : null, \n      roomDt: [],\n      rooms: [\n        {\n          id: 1,\n          name: \"1번방\",\n          statusText: \"이용중\",\n          statusClass: \"available\",\n          currentReservation: \"12:00 ~ 14:00\",\n          reservations: [\n            { id: 1, time: \"08:00 ~ 10:00\" },\n            { id: 2, time: \"12:00 ~ 14:00\" },\n            { id: 3, time: \"12:00 ~ 14:00\" },\n\n            { id: 4, time: \"12:00 ~ 14:00\" },\n          ],\n          showMore: false,\n        }\n       \n      ],\n    };\n  },\n  mounted() { // 실제로 화면에 내용이 그려진 직후에 확인.\n    // this.getRoomDt()\n    this.updateCurrentDateTime();\n    // setInterval(this.updateCurrentDateTime, 1000); // 1초마다 업데이트\n    console.log(\"모달로 전달된 선택된 날짜:\", this.selectedDate);\n\n  },\n  watch: { // 데이터 변경시 호출\n    selectedDate(newDate, oldDate) {\n      console.log(`selectedDate changed from ${oldDate} to ${newDate}`);\n\n      // 선택한 날짜에 따라 새로운 데이터를 가져오거나, 다른 작업을 수행\n\n      this.getReservationDt(newDate);\n    },\n    date(newDate) {\n    this.getReservationDt(newDate);\n  },\n  },\n  methods: {\n    // 룸 예약 정보 삭제\n    async delReservation(reservationId) {\n  try {\n    // 삭제하려는 예약 정보를 찾기\n    let reservationToDelete = null;\n    let roomToDelete = null;\n\n    for (const room of this.availableRoom) {\n      reservationToDelete = room.reservations.find(\n        (res) => res.id === reservationId\n      );\n      if (reservationToDelete) {\n        roomToDelete = room; // 해당 방 정보도 함께 저장\n        break;\n      }\n    }\n\n    if (!reservationToDelete || !roomToDelete) {\n      alert(\"삭제할 예약 정보를 찾을 수 없습니다.\");\n      return;\n    }\n    const formatTime = (time) => time.slice(11, 16); \n    // 예약 정보 저장\n    this.deletedReservation = {\n      phoneNumber: reservationToDelete.reser_phone || \"\",\n      userName: reservationToDelete.reser_user || \"\",\n      availableTime: `${formatTime(reservationToDelete.startTime)} ~ ${formatTime(\n        reservationToDelete.endTime\n      )}`, \n      roomName: roomToDelete.room_id, // 방 이름 또는 ID 저장\n    };\n\n    console.log(\"삭제할 예약 정보:\", this.deletedReservation);\n\n    // 예약 삭제 API 호출\n    const response = await managerStore.deleteTask(\n      `reservations/${reservationId}`\n    );\n    console.log(\"삭제 API 응답:\", JSON.stringify(response));\n    alert(\"해당 예약이 정상적으로 삭제되었습니다.\");\n\n    // cancelMsg 호출\n    this.cancelMsg(this.deletedReservation);\n\n    // 예약 데이터 갱신\n    this.getReservationDt(this.selectedDate);\n  } catch (error) {\n    console.error(\"[delReservation] 예약 삭제 오류:\", error);\n    alert(\"예약 삭제 중 오류가 발생했습니다.\");\n  }\n},\n    async cancelMsg(deletedReservation) {\n      const managerInfo = JSON.parse(localStorage.getItem(\"managerInfo\"));\n      console.log(\"[cancelMsg] Manager Info:\", managerInfo);\n\n      const params = {\n        phoneNumber: deletedReservation.phoneNumber,\n    userName: deletedReservation.userName,\n    availableTime:deletedReservation.availableTime,\n      storeName: managerInfo.identifier,\n      };\n\n      console.log(\"[cancelMsg] Sending params:\", params);\n\n      try {\n        const response = await managerStore.postTask(\n          `v1/sms/cancelReservation`,\n          params\n        );\n        console.log(\"[cancelMsg] Response received:\", response);\n      } catch (error) {\n        console.error(\"[cancelMsg] API call failed:\", error);\n      }\n    },\n    // 처음 2개의 예약을 표시하거나, showMore가 true일 때는 모든 예약을 표시\n    visibleReservations(room) {\n      console.log('filteredReservations : : ', JSON.stringify(room))\n\n      const filteredReservations = room.reservations.filter(reservation => {\n        return (\n          ( reservation.check === '사이값' || reservation.check === '초과값') &&\n        reservation.status === 'confirm' \n      );\n      });\n\n      // showMore 상태에 따라 결과 반환\n      if (room.showMore) {\n        return filteredReservations; // 모든 필터된 예약을 표시\n      }\n\n\n      return filteredReservations.slice(0, 2); // 처음 2개의 필터된 예약만 표시\n    },\n\n    // +MORE 버튼을 표시할지 여부\n    shouldShowMoreButton(room) {\n  const filteredReservations = room.reservations.filter(\n    reservation => reservation.status === 'confirm' // status가 confirm인 예약만 포함\n  );\n  return filteredReservations.length > 2 && !room.showMore;\n}\n,\n\n    // +MORE 버튼을 클릭했을 때 나머지 예약을 표시\n    showMoreReservations(room) {\n  const filteredReservations = room.reservations.filter(\n    reservation => reservation.status === 'confirm' // status가 confirm인 예약만 포함\n  );\n  if (filteredReservations.length > 2) {\n    room.showMore = true;\n  }\n},\n\n    // 예약이 4개 이상일 때만 스크롤바를 보이게 하는 조건\n    shouldScrollBeVisible(room) {\n      // console.log(\"Rooooom : : : \" , room)\n      return room.showMore && room.reservations.length > 3; // +MORE 클릭 후 4개 이상일 때 스크롤 표시\n    },\n    openModal(room) {\n    this.selectedRoom = room;\n    this.isEditMode = false; \n    this.selectedReservation = null;\n    console.log(\"openModal selectedDate:\", this.selectedDate);\n    this.isModalVisible = true;\n  },\n  editReservation(reservation, room) {\n  this.selectedReservation = reservation;\n  this.selectedRoom = room; // 방 정보도 함께 설정\n  this.isEditMode = true;\n  this.isModalVisible = true;\n},\n  closeModal() {\n    this.isModalVisible = false;\n    this.isEditMode = false; \n    this.selectedRoom = null;\n    this.selectedReservation = null;\n\n    this.getReservationDt(this.selectedDate);\n  },\n    async getRoomDt() {\n      const managerInfo = JSON.parse(localStorage.getItem('managerInfo'));\n      const response = await managerStore.getTask(`rooms`);\n      this.availableRoom = [];\n      console.log(\"roomNumbering : : : : : : \", JSON.stringify(response))\n      this.availableRoom = this.filterByManagerId(response, parseInt(managerInfo.id));\n\n      console.log(\"roomNumbering : : : : : : 필터링 후 \", JSON.stringify(this.availableRoom))\n\n    },\n    filterByManagerId(data, managerId) {\n      return data.filter(item => item.managerid === managerId);\n    },\n    async getReservationDt(date) {\n        const managerInfo = JSON.parse(localStorage.getItem('managerInfo'));\n        console.log(\"managerInfomanagerInfomanagerInfo : ::: \" , managerInfo.id)\n      // await taskStore.addTask(task);\n      // console.log(\"API 통신 시작\")\n      // 룸 정보 가져오는 구문 (GET)\n      await this.getRoomDt();\n      this.roomDt = []; // 초기화\n      this.roomDt = await managerStore.getTask(`reservations/date/${date}/manager?managerId=${managerInfo.id}`);\n      \n      console.log(\"룸데이터 가져오기 : : : : : : \", JSON.stringify(this.roomDt))\n      this.updateRoomStatus()\n      // console.log(\"roomDt[0].reser_user : : : \"  , this.roomDt[0].reser_user)\n      // localStorage.setItem('roomDt', JSON.stringify(this.roomDt));\n      // this.isAdding = false;\n      // this.isEditMode = false;\n      // this.currentTask = null;\n    },\n    // 현재 시간 구하기\n    updateCurrentDateTime() {\n      const now = new Date();\n\n      // UTC+9로 변환\n      const offset = 9 * 60; // 9시간 * 60분\n      const kstDate = new Date(now.getTime() + offset * 60 * 1000);\n\n      // 날짜와 시간 형식 지정\n      const formattedDate = `${kstDate.getUTCFullYear()}-${String(kstDate.getUTCMonth() + 1).padStart(2, '0')}-${String(kstDate.getUTCDate()).padStart(2, '0')}`;\n      const formattedTime = `${String(kstDate.getUTCHours()).padStart(2, '0')}:${String(kstDate.getUTCMinutes()).padStart(2, '0')}:${String(kstDate.getUTCSeconds()).padStart(2, '0')}`;\n\n      // UTC+9에 맞춘 ISO 8601 형식으로 출력\n      this.currentDateTime = `${formattedDate}T${formattedTime}.000Z`;\n      this.currentDate = formattedDate;\n      this.currentTime = formattedTime;\n      this.selectedDate = this.currentDate\n      console.log(this.currentDateTime); // 예: 2024-11-06T04:49:05+09:00\n\n      console.log(\"현재 날짜 시간\" + this.currentDateTime)\n      this.getReservationDt(this.currentDate);\n    },\n\n    getFormattedTime() {\n      const now = new Date();\n      return new Date(this.currentDateTime).getTime(); // ISO 형식으로 변환\n    },\n    updateRoomStatus() {\n  console.log(\"this.roomDt : :: \", this.roomDt);\n\n  const formattedTime = this.getFormattedTime(); // 현재 시간 가져오기\n\n  this.roomDt.forEach((room, roomIndex) => {\n    this.roomDt[roomIndex].reservations = room.reservations.filter(reservation => {\n      const start = new Date(reservation.startTime).getTime();\n      const end = new Date(reservation.endTime).getTime();\n\n      if (reservation.status === \"confirm\") {\n        console.log(\"Reservation passed status check: \", reservation);\n        if (formattedTime >= start && formattedTime <= end) {\n          reservation.check = \"사이값\";\n          return true;\n        } else if (formattedTime < start) {\n          reservation.check = \"초과값\";\n          return true;\n        }\n      } else {\n        console.log(\"Reservation did not pass status check: \", reservation);\n      }\n      return false;\n    });\n  });\n\n  if (this.roomDt.length > 0) {\n    console.log(\"Filtered roomDt: \", JSON.stringify(this.roomDt));\n    for (let i = 0; i < this.availableRoom.length; i++) {\n      for (let a = 0; a < this.roomDt.length; a++) {\n        if (this.roomDt[a].room_id === this.availableRoom[i].room_id) {\n          this.availableRoom[i].reservations = this.roomDt[a].reservations;\n        }\n      }\n    }\n\n    this.availableRoom.forEach(room => {\n      if (room.reservations && room.reservations.length > 0) {\n        const checkValue = room.reservations[0].check;\n        if (checkValue === \"초과값\") {\n          room.status = \"upcoming\";\n        } else if (checkValue === \"사이값\") {\n          room.status = \"available\";\n        } else {\n          room.status = \"waiting\";\n        }\n      } else {\n        room.status = \"waiting\";\n      }\n    });\n\n    this.availableRoom = [...this.availableRoom];\n    console.log(\"Updated availableRoom: \", JSON.stringify(this.availableRoom));\n  } else {\n    this.availableRoom = [...this.availableRoom];\n    console.log(\"No room data found: \", JSON.stringify(this.availableRoom));\n  }\n}\n\n  },\n};\n</script>\n\n<style scoped>\n/* 전체 컨테이너의 배경색 설정 */\n.reservation-container {\n  background: #f5f6f6;\n  display: flex;\n  height: 100%;\n  /* 기본값이 세로방향인 flex-direction을 가로방향으로 설정 */\n  flex-direction: row;\n}\n\n/* 24.12.23 수정 */\n.wrapper {\n    width: 100%;\n    padding: 30px;\n    /* gap: 20px; */\n    height: 100vh;\n}\n\n\n/* 타이틀 박스 */\n.title-box {\n  background-color: #fff;\n  padding: 30px;\n  margin-bottom: 20px;\n}\n\n/* 날짜 선택 박스 */\n.date-picker-box {\n  background-color: #fff;\n  padding: 30px;\n  margin-bottom: 20px;\n}\n\n/* 24.11.11 수정 */\n.date {\n  width: 250px;\n  height: 60px;\n  border: 1px solid #ddd;\n  padding: 0 20px;\n}\n\n/* 방 리스트 박스 */\n.room-list-box {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  background-color: #fff;\n  padding: 20px;\n  padding-bottom: 130px;\n}\n\n/* 개별 방 박스 */\n.room-box {\n  background-color: #fff;\n  padding: 40px 30px;\n  width: 270px;\n  height: 270px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n/* 방 제목과 예약 버튼 */\n.room-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n}\n\n.reserve-btn {\n  background-color: #E34D55;\n  color: #fff;\n  border: none;\n  padding: 5px;\n  border-radius: 4px;\n}\n\n/* 상태 표시 */\n.room-status {\n  display: flex;\n  justify-content: space-between;\n  gap: 6px;\n  margin-bottom: 10px;\n}\n\n.status-label {\n  padding: 7.5px 6.5px;\n  border-radius: 4px;\n  color: #fff;\n}\n\n.room-box.available {\n  border-color: #14B655;\n}\n\n.room-box.waiting {\n  border-color: #D30F1A;\n}\n\n.room-box.upcoming {\n  border-color: #184199;\n\n}\n\n.available .status-label {\n  background-color: #14B655;\n}\n\n.available .reservation-time {\n  color: #14B655;\n}\n\n.waiting .status-label {\n  background-color: #D30F1A;\n\n}\n\n.waiting .reservation-time {\n  color: #D30F1A\n}\n\n.upcoming .status-label {\n  background-color: #184199;\n}\n\n.upcoming .reservation-time {\n  color: #184199;\n}\n\n.reservation-time {\n  color: #333;\n}\n\n/* 예약 상세 */\n.reservation-details {\n  background-color: #f5f5f5;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: none;\n}\n\n.reservation-time {\n\n  letter-spacing: -1px;\n}\n\n.reservation-actions {\n  display: flex;\n}\n\n.reservation-time-block {\n  letter-spacing: -1px;\n}\n\n.delete-btn,\n.edit-btn {\n  letter-spacing: -2px;\n  background: none;\n  border: none;\n  color: #D30F1A;\n  gap: 6px;\n  cursor: pointer;\n}\n\n.edit-btn {\n  color: #184199;\n}\n\n/* +More 버튼 */\n.more-btn {\n  text-align: center;\n  color: #bbb;\n  cursor: pointer;\n}\n\n.scroll-container {\n  max-height: none;\n  overflow-y: hidden;\n}\n\n/* 스크롤 가능한 상태일 때 스크롤바 적용 */\n.scroll-container.scrollable {\n  max-height: 150px;\n  /* 4개 이상의 예약이 있을 때 스크롤바가 생김 */\n  overflow-y: auto;\n}\n</style>\n"]}]}