{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/manager/ManagerHeader.vue?vue&type=style&index=0&id=5fa06941&prod&scoped=true&lang=css","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/manager/ManagerHeader.vue","mtime":1734416732213},{"path":"/usr/vue/lezuro_all/node_modules/css-loader/dist/cjs.js","mtime":1728542747276},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1728542748492},{"path":"/usr/vue/lezuro_all/node_modules/postcss-loader/src/index.js","mtime":1728542747992},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmhlYWRlciB7CiAgaGVpZ2h0OiA5MHB4OwogIGJhY2tncm91bmQtY29sb3I6ICMzMzM7Cn0KLmNlbnRlcnsgIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIHBhZGRpbmc6IDI1cHggNDFweDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47fQoubG9nby1jb250YWluZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBtYXJnaW4tbGVmdDo3NnB4Owp9CgoubG9nby1pbWFnZSB7CiAgICB3aWR0aDoxMjZweDsKfQoKLmxvZ28tdGV4dCB7CiAgY29sb3I6IHdoaXRlOwogIG1hcmdpbi1sZWZ0OiAxMHB4Owp9CgoubWVudS1jb250YWluZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBjb2xvcjogd2hpdGU7Cn0KCi5tZW51LWxpbmsgewogIGNvbG9yOiB3aGl0ZTsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgbWFyZ2luOiAwIDE1cHg7Cn0KCi5zZXBhcmF0b3IgewogIGNvbG9yOiB3aGl0ZTsKfQo="},{"version":3,"sources":["ManagerHeader.vue"],"names":[],"mappings":";AA+HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ManagerHeader.vue","sourceRoot":"src/components/manager","sourcesContent":["<template>\n  <header>\n    <div class=\"center\">\n    <!-- 로고 섹션 -->\n    <div class=\"logo-container\">\n      <img src=\"../../../img/lezuro-logo-white-2-3@2x.png\" alt=\"Logo\" class=\"logo-image\" />\n    </div>\n    <!-- 우측 메뉴 섹션 -->\n    <div class=\"menu-container\">\n      <div class=\"menu-link\" @click=\"$router.push('/')\">\n        <img src=\"../../../img/Vector-2.png\" alt=\"\" >\n        홈페이지</div>\n      <span class=\"separator\">|</span>\n      <div class=\"menu-link\" @click=\"logOut()\">로그아웃</div>\n    </div>\n    </div>\n  </header>\n</template>\n\n<script>\nexport default {\n  name: 'HeaderComponent',\n  data() {\n    return {\n      isLoggedIn: false, // 로그인 상태\n      activeMenu: '', // 현재 활성 메뉴 항목\n      userName : '',\n      cnt : 0\n    };\n  },\n  mounted() {\n    // 로그인 상태를 확인 (예: 로컬 스토리지에서 토큰 확인)\n    const managerToken = localStorage.getItem(\"managerToken\");\n    \n    console.log(\"managerToken : : : \" , managerToken)\n     \n    if(managerToken){\n    \n      this.isLoggedIn =  true;\n      // console.log(\"localStorage.getItem('loginInfo') : : :\" ,localStorage.getItem('loginInfo'))\n      const managerInfo = JSON.parse(localStorage.getItem('managerInfo'));\n      console.log(\"managerToken : : : \" , managerInfo)      \n      this.checkAuth(managerInfo.id, managerToken)\n      const isFirstLogin = localStorage.getItem(\"isFirstLogin\");\n      if (isFirstLogin === \"true\") {\n        localStorage.setItem(\"isFirstLogin\", \"false\"); // 새로고침 후 플래그를 false로 변경\n        window.location.reload();\n      }\n    }else{\n      this.$router.push({path:\"/managerlogin\"})\n      this.isLoggedIn =  false;\n    }\n    // setTimeout(() => {\n    //       this.logOut(); // 로그아웃 메서드 호출\n    //     }, 60 * 60 * 1000); // 1시간 = 60분 * 60초 * 1000밀리초\n    \n    \n\n  },\n  methods: {\n    async checkAuth(idx, tokens){\n    \n    try {\n          const response = await axios.get(`http://13.124.62.68:3000/api/administrators/${idx}`, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${tokens}`,\n            },\n          });\n          console.log(\"response : : : : \" , response)\n          \n\n        } catch (error) {\n          console.error(\"토큰 갱신 에러:\", error);\n          // 여기서 리프레시 토큰 및 엑세스 토큰 재 갱신\n    \n            this.getRefreshToken(tokens)\n                    .then((data) => {\n                      console.log(\"갱신된 데이터:\", data);\n                      localStorage.setItem('managerToken', data.token);});\n                      localStorage.setItem(\"isFirstLogin\", \"true\"); \n                      window.location.reload();\n          \n          throw error; // 에러를 호출한 곳으로 다시 던짐\n        }\n   },\n    setActiveMenu(menu) {\n      this.activeMenu = menu; // 클릭한 메뉴 항목을 활성화\n    },\n    logOut(){\n      \n      localStorage.removeItem(\"managerToken\");\n      localStorage.removeItem(\"managerInfo\");\n      window.location.reload();\n    },\n    async getRefreshToken(tokens){\n      try {\n          const response = await axios.get('http://13.124.62.68:3000/api/v1/auth/refresh', {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${tokens}`,\n            },\n          });\n\n          // Response 예제: \n          // {\"token\":\"...\", \"refreshToken\":\"...\", \"tokenExpires\":...}\n\n          // 필요한 데이터만 리턴\n          const { token, refreshToken, tokenExpires } = response.data;\n\n          console.log(\"새로운 토큰:\", token);\n          console.log(\"새로운 리프레시 토큰:\", refreshToken);\n          console.log(\"토큰 만료 시간:\", tokenExpires);\n\n          // 객체 형태로 리턴\n          return { token, refreshToken, tokenExpires };\n\n        } catch (error) {\n          console.error(\"토큰 갱신 에러:\", error);\n          throw error; // 에러를 호출한 곳으로 다시 던짐\n        }\n    },\n  }\n};\n</script>\n\n<style scoped>\nheader {\n  height: 90px;\n  background-color: #333;\n}\n.center{  display: flex;\n  align-items: center;\n    padding: 25px 41px;\n  justify-content: space-between;}\n.logo-container {\n  display: flex;\n  align-items: center;\n  margin-left:76px;\n}\n\n.logo-image {\n    width:126px;\n}\n\n.logo-text {\n  color: white;\n  margin-left: 10px;\n}\n\n.menu-container {\n  display: flex;\n  align-items: center;\n  color: white;\n}\n\n.menu-link {\n  color: white;\n  text-decoration: none;\n  margin: 0 15px;\n}\n\n.separator {\n  color: white;\n}\n</style>\n"]}]}