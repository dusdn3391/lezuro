{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/admin/AdminCourseManagementWrite.vue?vue&type=template&id=63108ffc&scoped=true","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/admin/AdminCourseManagementWrite.vue","mtime":1733276387681},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js","mtime":1728543112262},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1728542748492},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}