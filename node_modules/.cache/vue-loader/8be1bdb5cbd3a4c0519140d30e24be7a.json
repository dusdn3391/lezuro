{"remainingRequest":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/vue/lezuro_all/src/components/MapList.vue?vue&type=script&lang=js","dependencies":[{"path":"/usr/vue/lezuro_all/src/components/MapList.vue","mtime":1731981740642},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/thread-loader/dist/cjs.js","mtime":1728542748260},{"path":"/usr/vue/lezuro_all/node_modules/babel-loader/lib/index.js","mtime":1728543112262},{"path":"/usr/vue/lezuro_all/node_modules/cache-loader/dist/cjs.js","mtime":1728542746732},{"path":"/usr/vue/lezuro_all/node_modules/vue-loader/lib/index.js","mtime":1728542748492}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["MapList.vue"],"names":[],"mappings":";AAmHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA","file":"MapList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container-center-horizontal\">\n    <div class=\"findvenue-2 screen\">\n      <Header />\n      <rj-zs-wi :frame72911Props=\"rJZsWIProps.frame72911Props\" />\n      <div class=\"title pretendard-bold-log-cabin-38px\">매장찾기</div>\n      <div class=\"select-box\">\n        <div class=\"select-align\">\n          <div class=\"select-style\">\n            <!-- 지역을 선택할 수 있는 select box -->\n            <select class=\"select-text pretendard-regular-normal-mine-shaft-18px\">\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\" disabled selected>전체지역</option>\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\">전체지역 1</option>\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\">전체지역 2</option>\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\">전체지역 3</option>\n            </select>\n          </div>\n          <div class=\"select-style\">\n            <!-- 세부지역을 선택할 수 있는 select box -->\n            <select class=\"select-text pretendard-regular-normal-mine-shaft-18px\">\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\" disabled selected>전체지역(시군구)</option>\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\">서울</option>\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\">대구</option>\n              <option class=\"pretendard-regular-normal-mine-shaft-18px\" value=\"\">부산</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"input-style\">\n          <!-- 검색어 입력 필드 -->\n          <input type=\"text\" class=\"input-text pretendard-regular-normal-mountain-mist-18px\"\n            placeholder=\"검색어를 입력해주세요\" />\n          <img class=\"search-btn-10\"\n            src=\"https://cdn.animaapp.com/projects/66da512d0c22d478015e0e07/releases/66da51d8cf50153cef9952df/img/searchbtn-9.svg\"\n            alt=\"searchBtn\" />\n        </div>\n      </div>\n\n      <!-- 720px 초과 -->\n      <div class=\"shop-list-frame\">\n        <div class=\"shop-lists\">\n          <div v-for=\"(venue, index) in limitVenue\" :key=\"index\" class=\"shop-info-box\">\n            <div class=\"shop-info\">\n              <div class=\"shop-name-info\">\n                <div class=\"valign-text-middle pretendard-bold-mine-shaft-20px\">{{ venue.name }}</div>\n              </div>\n              <div class=\"address-contant-align pretendard-regular-normal-granite-gray-16px\">\n                <!-- <div>주소 : {{ venue.address }}</div> -->\n                <!-- 24.11.19 수정 - 추가 -->\n                <div>주소: {{ getShortAddress(venue.address) }}</div>\n                <div>연락처 : {{ venue.telNumber }}</div>\n              </div>\n            </div>\n            <div class=\"shop-info-btn\">\n              <button class=\"detail-view-btn pretendard-medium-white-12px\" @click=\"openModal(venue)\">자세히보기</button>\n              <button class=\"reservation-btn pretendard-medium-white-12px\"\n                @click=\"toGoReservationWrite(venue)\">예약하기</button>\n              <button class=\"call-btn pretendard-medium-white-12px\"> <a :href=\"'tel:' + venue.telNumber\"\n                  class=\"pretendard-medium-white-12px\">전화걸기</a></button>\n              <!-- <div class=\"view-44\">\n                <div class=\"overlap-group2-5\">\n                  <a :href=\"'tel:' + venue.telNumber\">\n                    <div class=\"text-1-4 valign-text-middle pretendard-medium-white-12px\">전화걸기</div>\n                  </a>\n                </div>\n              </div> -->\n            </div>\n          </div>\n        </div>\n        <div class=\"map-box\">\n          <!-- <div ref=\"mapContainer\" class=\"map-container\"></div> -->\n          <div id=\"map\" style=\"width: 100%; height: 100%;\"></div>\n          <!-- <div class=\"frame-container-10\" :style=\"{ 'background-image': 'url(' + frameContainer + ')' }\">\n              <frame72984 :text2687=\"frame729841Props.text2687\" />\n              <frame72984 :text2687=\"frame729842Props.text2687\" :className=\"frame729842Props.className\" />\n              <frame72984 :text2687=\"frame729843Props.text2687\" :className=\"frame729843Props.className\" />\n              <frame72984 :text2687=\"frame729844Props.text2687\" :className=\"frame729844Props.className\" />\n            </div> -->\n        </div>\n      </div>\n\n      <!-- 720px 이하 -->\n      <div class=\"shop-list\">\n        <div v-for=\"(venue, index) in limitVenue\" :key=\"index\" class=\"shop-list-card\">\n          <div class=\"shop-info-align\">\n            <div class=\"pretendard-bold-mine-shaft-20px\">{{ venue.name }}</div>\n            <div class=\"address-contant-align pretendard-regular-normal-granite-gray-16px\">\n              <div>주소 : {{ venue.address }}</div>\n              <div>연락처 : {{ venue.telNumber }}</div>\n            </div>\n          </div>\n          <div class=\"btn-align\">\n            <div class=\"btn-align-head\">\n              <button class=\"detail-view-btn pretendard-medium-white-12px\" @click=\"openModal(venue)\">자세히보기</button>\n              <button class=\"call-btn pretendard-medium-white-12px\"> <a :href=\"'tel:' + venue.telNumber\"\n                  class=\"pretendard-medium-white-12px\">전화걸기</a></button>\n            </div>\n            <button class=\"reservation-btn pretendard-medium-white-12px\"\n              @click=\"toGoReservationWrite(venue)\">예약하기</button>\n\n          </div>\n        </div>\n      </div>\n\n      <!-- <div>   -->\n      <!-- <div id=\"map\" style=\"width: 500px; height: 400px;\"></div> -->\n      <!-- </div> -->\n\n      <XFooter />\n      <GameDetail v-if=\"isModalVisible\" :shop=\"selectedShop\" @close=\"closeModal\" />\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Header from \"./Header\";\nimport RjZsWi from \"./RjZsWi\";\n\nimport XFooter from \"./XFooter\";\nimport GameDetail from \"./GameDetail\"\nimport GoogleMap from './GoogleMap.vue';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { taskStore } from '@/store/taskStore';  // API 호출\n\n\nexport default {\n  name: \"MapList\",\n  components: {\n    Header,\n    GameDetail,\n    RjZsWi,\n    XFooter,\n    GoogleMap,\n  },\n  props: [\n    \"rJZsWIProps\",\n  ],\n  data() {\n    return {\n      isModalVisible: false,\n      selectedShop: null, // 선택한 매장 정보 저장\n      venues: [\n        {\n          name: \"레저로스크린파크골프 광명점\",\n          address: \"경기도 광명시 오리로500\",\n          telNumber: \"02-898-0727\",\n          branchId: \"branch301\",\n\n          location: { latitude: 37.556785357670286, longitude: 126.8369964659211 }\n        }\n      ],\n      limitVenue: [],\n      map: null,\n      location: null, // 위치 정보\n    };\n  },\n  mounted() {\n    //  this.loadNaverMap();\n    this.getDetailStroeInfo();\n    // this.callArround()\n    // this.initializeMap();\n  },\n  methods: {\n    async handleSearch(query) {\n      // Handle the search query here\n      console.log('Search query received:', query);\n\n      const foundLocations = this.venues\n        // .filter(venue => venue.name.includes(query)) // Check if the venue name includes the search query\n        .filter(venue => venue.name === query)\n        .map(venue => venue.location); // Return only the location values\n      console.log('Found locations:', foundLocations);\n      if (foundLocations.length === 0) {\n        alert('해당되는 매장이 존재 하지 않습니다.'); // Warning for no matches\n      }\n      else {\n        this.location = {\n          lat: foundLocations[0].latitude,\n          lng: foundLocations[0].longitude,\n        };\n        this.initializeMap();\n      }\n\n\n    },\n    // 현재 나의 위치 찾기\n    getCurrentLocation() {\n      // if (navigator.geolocation) {\n      //   navigator.geolocation.getCurrentPosition(\n      //     (position) => {\n      //       this.location = {\n      //         lat: position.coords.latitude,\n      //         lng: position.coords.longitude,\n      //       };\n      //       // this.initializeMap(); // 구글 지도 로드\n      //       this.loadNaverMap(); // 네이버 지도 로드\n      //     },\n      //     (error) => {\n      //       console.error(\"Error getting location:\", error);\n      //     }\n      //   );\n      // } else {\n      //   alert(\"Geolocation is not supported by this browser.\");\n      // }\n\n      fetch(\"http://ip-api.com/json/\")\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(\"IP-based location:\", data);\n          this.location = {\n            lat: data.lat,\n            lng: data.lon,\n          };\n          this.loadNaverMap(); // 네이버 지도 로드\n        })\n        .catch((error) => console.error(\"Error fetching location:\", error));\n\n    },\n\n\n\n    openModal(venue) {\n      this.selectedShop = venue;\n      this.isModalVisible = true; // 모달 열기\n      console.log(\"this.selectedShop : : :\", JSON.stringify(this.selectedShop))\n    },\n    closeModal() {\n      this.isModalVisible = false;\n      this.selectedShop = null;\n    },\n    // 동까지만 추출하는 메서드 - 24.11.19 수정\n    getShortAddress(fullAddress) {\n      // 주소를 공백이나 특정 기준(예: \"동\")으로 분리\n      const regex = /(.*동|.*읍|.*면|.*길|.*로)/;\n      const match = fullAddress.match(regex);\n      return match ? match[0] : fullAddress; // 동까지만 반환하거나 원본 주소 반환\n    },\n    toGoReservationWrite(venue) {\n      this.selectedShop = venue;\n      console.log(\"this.selectedShop : : : \", this.selectedShop)\n\n      this.$router.push({\n        name: \"reservation-write\", // 해당 경로의 name을 지정하세요.\n        params: {\n          name: this.selectedShop.name,\n          branchId: this.selectedShop.branchId,\n          address: this.selectedShop.address,\n          weekdayHours: this.selectedShop.weekdayHours,\n          weekendHours: this.selectedShop.weekendHours,\n          mapImage: this.selectedShop.mapImage,\n          managerid: this.selectedShop.managerid,\n          storeScale: this.selectedShop.storeScale,\n          location: {\n            latitude: this.selectedShop.latitude,\n            longitude: this.selectedShop.longitude\n          }\n        }\n      });\n    },\n\n\n\n    async getDetailStroeInfo() {\n\n      try {\n        const response = await taskStore.getSelectTasks(\"v1/branch/list\");\n        console.log(\"Courses loaded:\", JSON.stringify(response));\n        if (!response || response === undefined) {\n          alert(\"로그인을 다시 해주세요.\");\n        } else {\n          // this.venues = this.transformBranchesData(response) // 데이터 변환\n          this.limitVenue = this.transformBranchesData(response) // 배포용\n          this.getCurrentLocation();\n        }\n      } catch (error) {\n        console.error(\"Error loading courses:\", error);\n        alert(\"매장데이터 조회 실패했습니다. 서버 오류를 확인하세요.\");\n\n      }\n\n\n\n    },\n\n    // 주변 반경 찾기 로직\n    calculateDistance(lat1, lng1, lat2, lng2) {\n      const toRad = (value) => (value * Math.PI) / 180;\n      const R = 6371; // Earth's radius in kilometers\n      const dLat = toRad(lat2 - lat1);\n      const dLng = toRad(lng2 - lng1);\n\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *\n        Math.sin(dLng / 2) * Math.sin(dLng / 2);\n\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c; // Distance in kilometers\n    },\n\n    findClosestBranch(currentLocation, branches) {\n      // 각 매장과의 거리를 계산하여 새로운 배열 생성\n      const branchesWithDistance = branches.map((branch) => {\n        const distance = this.calculateDistance(\n          currentLocation.lat,\n          currentLocation.lng,\n          branch.location.latitude,\n          branch.location.longitude\n        );\n        return { ...branch, distance };\n      });\n\n      // 거리를 기준으로 정렬 후 가장 가까운 5개의 매장을 반환\n      const closestBranches = branchesWithDistance\n        .sort((a, b) => a.distance - b.distance) // 거리 오름차순 정렬\n        .slice(0, 4); // 가까운 5개만 선택\n\n      // return closestBranches;\n      return [\n        { name: \"현재 위치\", location: { latitude: currentLocation.lat, longitude: currentLocation.lng }, distance: 0 },\n        ...closestBranches,\n      ];\n    },\n    // 주변 매장 탐색\n    callArround() {\n      const currentLocation = { lat: 37.5583761, lng: 126.8345277 };\n      const branches = [\n        {\n          branchId: \"branch001\",\n          name: \"서울 지점\",\n          location: { latitude: 37.5000, longitude: 127.0364 }\n        },\n        {\n          branchId: \"branch0010\",\n          name: \"델리케밥\",\n          location: { latitude: 37.55965189952221, longitude: 126.83222565575036 }\n        },\n        {\n          branchId: \"branch0001\",\n          name: \"델리케밥0\",\n          location: { latitude: 37.56006592349469, longitude: 126.83523518132029 }\n        },\n        {\n          branchId: \"branch101\",\n          name: \"델리케밥1\",\n          location: { latitude: 37.56128049081266, longitude: 126.8394164423239 }\n        },\n        {\n          branchId: \"branch201\",\n          name: \"델리케밥2\",\n          location: { latitude: 37.56080374714247, longitude: 126.82919239989074 }\n        },\n        {\n          branchId: \"branch301\",\n          name: \"델리케밥3\",\n          location: { latitude: 37.556785357670286, longitude: 126.8369964659211 }\n        },\n        {\n          branchId: \"branch401\",\n          name: \"델리케밥4\",\n          location: { latitude: 37.56009802237206, longitude: 126.83171172240971 }\n        },\n        {\n          branchId: \"branch501\",\n          name: \"델리케밥5\",\n          location: { latitude: 37.559176533344726, longitude: 126.8314024154255 }\n        },\n        {\n          branchId: \"branch601\",\n          name: \"델리케밥6\",\n          location: { latitude: 37.56138036084911, longitude: 126.82090267531436 }\n        },\n\n        {\n          branchId: \"branch002\",\n          name: \"부산 지점\",\n          location: { latitude: 31.5000, longitude: 117.0364 }\n        }\n      ];\n      const closestBranch = this.findClosestBranch(currentLocation, branches);\n      console.log(\"Closest Branch:\", closestBranch);\n    },\n\n\n    // 데이터 변환\n    transformBranchesData(data) {\n      return data.map(branch => {\n        return {\n          ...branch,\n          branchId: branch.id,\n          location: {\n            latitude: branch.latitude || 37.56128049081266, // 기본값 사용\n            longitude: branch.longitude || 126.8394164423239 // 기본값 사용\n          }\n        };\n      });\n    },\n\n\n    // 네이버 지도 로드\n    loadNaverMap() {\n      // Naver Maps API 로드 확인\n      if (typeof naver !== \"undefined\") {\n        this.naverInitMap();\n      } else {\n        // 로드되지 않았으면 다시 확인\n        const checkNaverMap = setInterval(() => {\n          if (typeof naver !== \"undefined\") {\n            clearInterval(checkNaverMap);\n            this.naverInitMap();\n          }\n        }, 100); // 100ms 간격으로 확인\n      }\n    },\n\n    // 네이버 지도 로드\n    naverInitMap() {\n      console.log(\"진행중입니다.\")\n      console.log(this.location)\n      // Naver Map 생성\n      const map = new naver.maps.Map(\"map\", {\n        //  center: this.location,35.869368,128.599230\n        center: new naver.maps.LatLng(this.location.lat, this.location.lng), // 서울 시청 좌표\n        zoom: 25,\n      });\n\n      // 마커 추가 예제\n      const marker = new naver.maps.Marker({\n        position: new naver.maps.LatLng(this.location.lat, this.location.lng),\n        map: map,\n      });\n      // 현 위치 기준 가장 가까운 매장 보여주기\n      const closestBranch = this.findClosestBranch(this.location, this.limitVenue);\n      // console.log(\"현 위치 기준 가장 가까운 매장 보여주기 :\", JSON.stringify(closestBranch));\n      // console.log(\"현 위치 기준 가장 가까운 매장 보여주기 :\", JSON.stringify(this.limitVenue));\n\n\n      this.limitVenue.forEach((branch, index) => {\n        const marker = new naver.maps.Marker({\n          position: new naver.maps.LatLng(branch.latitude, branch.longitude),\n          map: map,\n        });\n\n        // const markerOptions = {\n        // position: new naver.maps.LatLng(branch.latitude, branch.longitude),\n        // map: map,\n        //     };\n\n        //     // 0번째 인덱스일 때 아이콘을 빨간색으로 설정\n        //     if (index === 0) {\n        //         markerOptions.icon = {\n        //             content: '<div style=\"background-color: red; width: 24px; height: 24px; border-radius: 50%;\"></div>',\n        //         };\n        //     }\n\n        //     const marker = new naver.maps.Marker(markerOptions);\n\n\n        this.limitVenue = closestBranch.slice(1, 5);\n        // 마커에 인포윈도우 추가 예제\n        const infoWindow = new naver.maps.InfoWindow({\n          // content: `<div style=\"padding:10px;\">${ index === 0  ? \"현재 나의 위치\" : branch.name}</div>`,\n\n          content: `<div style=\"padding:10px;\">${branch.name}</div>`,\n        });\n\n        naver.maps.Event.addListener(marker, \"click\", () => {\n          infoWindow.open(map, marker);\n        });\n\n\n      });\n\n\n    },\n\n    /// 구글 지도 로드\n    async initializeMap() {\n      const loader = new Loader({\n        apiKey: 'AIzaSyCDIXWiutjxK5qjCATUyKIL5Sd13E-LSUs', // 생성한 API 키로 교체\n        version: 'weekly',\n      });\n\n      console.log(this.location)\n      console.log('JSOPN : : : ', JSON.stringify(this.location))\n      await loader.load();\n      this.map = new google.maps.Map(this.$refs.mapContainer, {\n        // center: this.location,35.869368,128.599230\n        center: { lat: 35.869368, lng: 128.599230 }, // 초기 지도 중심 좌표 (예: 샌프란시스코)\n        zoom: 15,\n      });\n\n      console.log(\"this.location: : : : : : : \", this.location)\n      // const closestBranch = this.findClosestBranch(currentLocation, branches);\n      const closestBranch = this.findClosestBranch(this.location, this.venues);\n      console.log(\"Closest Branch:\", closestBranch);\n\n\n      // 매장명 보이기\n      const infoWindow = new google.maps.InfoWindow();\n      this.limitVenue = closestBranch.slice(1, 5);\n      // this.venues = closestBranch.slice(1, 5);\n\n      // 모든 지점에 대해 마커 추가 및 클릭 이벤트 설정\n      closestBranch.forEach((branch, index) => {\n        const marker = new google.maps.Marker({\n          position: {\n            lat: branch.location.latitude,\n            lng: branch.location.longitude,\n          },\n          map: this.map,\n          title: branch.name, // 타이틀 설정\n          icon: index === 0 ? 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' : null, // 현재 위치 마커는 파란색\n        });\n\n\n        // 마커 클릭 시 InfoWindow에 타이틀 표시\n        marker.addListener('click', () => {\n          infoWindow.setContent(branch.name); // 지점 이름을 InfoWindow에 설정\n          infoWindow.open(this.map, marker); // InfoWindow를 마커 위치에 표시\n        });\n      });\n\n\n\n    },\n\n  }\n};\n</script>\n\n<style scoped src=\"@/style/shop/maplist.css\" />"]}]}